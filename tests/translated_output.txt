
PROC(5)                 Руководство программиста Linux                PROC(5)
НАЗВАНИЕ         top
       proc - псевдо-файловая система информации о процессах
ОПИСАНИЕ         top
       Файловая система proc - это псевдо-файловая система, которая предоставляет
       интерфейс к структурам данных ядра. Обычно она монтируется в
       /proc. Как правило, она монтируется автоматически системой, но
       также может быть смонтирована вручную с помощью команды, например:

           mount -t proc proc /proc

       Большинство файлов в файловой системе proc доступны только для чтения, но некоторые
       файлы доступны для записи, что позволяет изменять переменные ядра.

   Параметры монтирования
       Файловая система proc поддерживает следующие параметры монтирования:

       hidepid=n (начиная с Linux 3.3)
              Эта опция контролирует, кто может получить доступ к информации в
              каталогах /proc/[pid]. Аргумент n может принимать одно из
              следующих значений:

              0   Все могут получить доступ ко всем каталогам /proc/[pid].
                  Это традиционное поведение и значение по умолчанию, если
                  этот параметр монтирования не указан.

              1   Пользователи не могут получить доступ к файлам и подкаталогам
                  внутри любых директорий /proc/[pid], кроме своих собственных
                  (сами директории /proc/[pid] остаются видимыми).
                  Чувствительные файлы, такие как /proc/[pid]/cmdline и
                  /proc/[pid]/status, теперь защищены от других
                  пользователей. Это делает невозможным узнать, запускает ли
                  какой-либо пользователь определенную программу (если программа
                  не раскрывает себя иным образом своим поведением).

              2   Как и для режима 1, но дополнительно директории /proc/[pid],
                  принадлежащие другим пользователям, становятся невидимыми.
                  Это означает, что записи /proc/[pid] больше не могут
                  использоваться для обнаружения PID в системе. Это не скрывает
                  факт существования процесса с определенным значением PID
                  (это можно узнать другими способами, например,
                  с помощью "kill -0 $PID"), но скрывает UID и GID процесса,
                  которые в противном случае можно было бы узнать, применив
                  stat(2) к директории /proc/[pid]. Это значительно
                  усложняет задачу злоумышленника по сбору
                  информации о запущенных процессах (например, выяснение
                  того, запущен ли какой-либо демон с повышенными
                  привилегиями, запускает ли другой пользователь
                  какую-либо чувствительную программу, запускают ли другие 
                  пользователи какие-либо программы вообще, и так далее).

       gid=gid (начиная с Linux 3.3)
              Указывает ID группы, члены которой авторизованы
              для получения информации о процессах, иначе запрещённой
              параметром hidepid (т.е. пользователи в этой группе ведут себя так, 
              будто /proc смонтирован с hidepid=0). Эту группу следует использовать
              вместо таких подходов, как добавление обычных пользователей в
              файл sudoers(5).

   Обзор
       Внутри /proc существуют следующие основные группы файлов
       и подкаталогов:

       Подкаталоги /proc/[pid]
              Каждый из этих подкаталогов содержит файлы и
              подкаталоги, раскрывающие информацию о процессе с
              соответствующим идентификатором процесса.

              Внутри каждого из каталогов /proc/[pid], подкаталог task
              содержит подкаталоги вида
              task/[tid], которые содержат соответствующую информацию о
              каждом из потоков в процессе, где tid - это
              идентификатор потока ядра.

              Подкаталоги /proc/[pid] видны при итерации
              по /proc с помощью getdents(2) (и, следовательно, видны, когда
              используется ls(1) для просмотра содержимого /proc).

       Подкаталоги /proc/[tid]
              Каждый из этих подкаталогов содержит файлы и
              подкаталоги, предоставляющие информацию о потоке с
              соответствующим идентификатором потока. Содержимое этих
              каталогов совпадает с соответствующими каталогами
              /proc/[pid]/task/[tid].

              Подкаталоги /proc/[tid] не видны при
              перечислении /proc с помощью getdents(2) (и, следовательно, не
              видны при использовании ls(1) для просмотра содержимого
              /proc).

       /proc/self
              Когда процесс обращается к этой магической символической ссылке, она
              преобразуется в собственный каталог процесса /proc/[pid].

       /proc/thread-self
              Когда поток обращается к этой магической символической ссылке, она
              преобразуется в собственный каталог процесса /proc/self/task/[tid].

       /proc/[a-z]*
              Различные другие файлы и подкаталоги в /proc предоставляют
              общесистемную информацию.

       Все вышеперечисленное описано более подробно ниже.

   Файлы и каталоги
       Следующий список предоставляет подробную информацию о многих файлах и
       каталогах в иерархии /proc.

       /proc/[pid]
              Существует числовой подкаталог для каждого запущенного
              процесса; подкаталог назван по идентификатору процесса.
              Каждый /proc/[pid]
              и каталоги, описанные ниже.

              Файлы внутри каждого /proc/[pid]
              принадлежат эффективному пользователю и эффективному групповому ID
              процесса. Однако, в качестве меры безопасности, владение
              устанавливается как root:root, если атрибут "dumpable" процесса
              установлен в значение, отличное от 1.

              До Linux 4.11, root:root означало "глобальный" идентификатор
              пользователя и группы root (т.е. UID 0 и GID 0 в начальном пространстве
              имен пользователя). Начиная с Linux 4.11, если процесс находится в 
              неначальном пространстве имен пользователя, которое имеет допустимое отображение
              для пользовательского (группового) ID 0 внутри пространства имен, то 
              владение пользователем (группой) файлами под /proc/[pid]
              вместо этого устанавливается таким же, как ID пользователя (группы) root
              пространства имен. Это означает, что внутри контейнера все работает 
              так, как ожидается для пользователя "root" контейнера.

              Атрибут "dumpable" процесса может изменяться по
              следующим причинам:

              *  Атрибут был явно установлен через операцию
                 PR_SET_DUMPABLE в prctl(2).

              *  Атрибут был сброшен до значения в файле
                 /proc/sys/fs/suid_dumpable
                 по причинам, описанным в prctl(2).

              Сброс атрибута "dumpable" на 1 возвращает
              владение /proc/[pid]/*
              эффективному UID и GID. Однако обратите внимание, что если
              эффективный UID или GID впоследствии изменяется, то
              атрибут "dumpable" может быть сброшен, как описано в
              prctl(2). Поэтому может быть желательно сбросить
              атрибут "dumpable" после внесения любых желаемых изменений в
              эффективный UID или GID процесса.

       /proc/[pid]/attr
              Файлы в этом каталоге предоставляют API для модулей
              безопасности. Содержимое этого каталога - файлы, которые
              можно читать и записывать для установки атрибутов, связанных с
              безопасностью. Этот каталог был добавлен для поддержки SELinux,
              но намерение заключалось в том, чтобы API был достаточно общим,
              чтобы поддерживать другие модули безопасности. Для целей
              объяснения ниже приведены примеры того, как SELinux использует эти
              файлы.

              Этот каталог присутствует только если ядро было
              сконфигурировано с CONFIG_SECURITY.

       /proc/[pid]/attr/current (начиная с Linux 2.6.0)
              Содержимое этого файла представляет текущие атрибуты
              безопасности процесса.

              В SELinux этот файл используется для получения контекста безопасности
              процесса. До версии Linux 2.6.11 этот файл не мог 
              использоваться для установки контекста безопасности (запись всегда 
              отклонялась), так как SELinux ограничивал переходы безопасности процесса 
              только функцией execve(2) (см. описание 
              /proc/[pid]/attr/exec ниже). Начиная с Linux 2.6.11, 
              SELinux снял это ограничение и начал поддерживать операции "установки" 
              с помощью записи в этот узел, если это разрешено 
              политикой, хотя использование этой операции подходит только 
              для приложений, которым доверяют поддерживать любое желаемое 
              разделение между старым и новым контекстами безопасности.

              До версии Linux 2.6.28 SELinux не позволял потокам 
              в многопоточном процессе устанавливать свой контекст 
              безопасности через этот узел, так как это привело бы к несогласованности 
              между контекстами безопасности потоков, совместно использующих 
              одно и то же пространство памяти. Начиная с Linux 2.6.28, SELinux снял 
              это ограничение и начал поддерживать операции "установки" для 
              потоков внутри многопоточного процесса, если новый контекст 
              безопасности ограничен старым контекстом безопасности, где 
              ограниченное отношение определяется в политике и гарантирует, что 
              новый контекст безопасности имеет подмножество разрешений 
              старого контекста безопасности.

              Другие модули безопасности могут выбрать поддержку "set"
              операций через запись в этот узел.

       /proc/[pid]/attr/exec
              Этот файл представляет атрибуты, которые присваиваются
              процессу при последующем вызове execve(2).

              В SELinux это необходимо для поддержки переходов роли/домена,
              и execve(2) является предпочтительной точкой для таких
              переходов, поскольку он предлагает лучший контроль над
              инициализацией процесса в новой метке безопасности
              и наследованием состояния. В SELinux этот атрибут
              сбрасывается при execve(2), чтобы новая программа вернулась к
              поведению по умолчанию для любых вызовов execve(2), которые она
              может сделать. В SELinux процесс может установить только свой
              собственный атрибут /proc/[pid]/attr/exec.

       /proc/[pid]/attr/fscreate (начиная с Linux 2.6.0)
              Этот файл представляет атрибуты, которые присваиваются файлам,
              созданным последующими вызовами open(2), mkdir(2),
              symlink(2) и mknod(2)

              SELinux использует этот файл для поддержки создания файла
              (используя вышеупомянутые системные вызовы) в безопасном состоянии,
              так что нет риска получения несанкционированного доступа между моментом создания
              и моментом установки атрибутов. В SELinux этот атрибут сбрасывается
              при выполнении execve(2), так что новая программа возвращается к 
              поведению по умолчанию для любых вызовов создания файлов, которые она может выполнять,
              но атрибут сохраняется при множественных вызовах создания файлов в 
              пределах программы, если он не сброшен явно. В SELinux процесс может установить только
              свой собственный атрибут /proc/[pid]/attr/fscreate.

       /proc/[pid]/attr/keycreate (начиная с Linux 2.6.18)
              Если процесс записывает контекст безопасности в этот файл, все
              впоследствии созданные ключи (add_key(2)) будут помечены
              этим контекстом. Для дополнительной информации смотрите
              файл исходного кода ядра Documentation/security/keys/core.rst
              (или файл Documentation/security/keys.txt в Linux между
              3.0 и 4.13, или Documentation/keys.txt до Linux 3.0).

       /proc/[pid]/attr/prev (начиная с Linux 2.6.0)
              Этот файл содержит контекст безопасности процесса
              до последнего execve(2); то есть, предыдущее значение
              /proc/[pid]/attr/current.

       /proc/[pid]/attr/socketcreate (начиная с Linux 2.6.18)
              Если процесс записывает контекст безопасности в этот файл, все
              впоследствии созданные сокеты будут помечены этим
              контекстом.

       /proc/[pid]/autogroup (начиная с Linux 2.6.38)
              См. sched(7).

       /proc/[pid]/auxv (начиная с 2.6.0)
              Содержит информацию интерпретатора ELF, переданную
              процессу во время выполнения exec. Формат - один
              идентификатор unsigned long плюс одно значение unsigned long
              для каждой записи. Последняя запись содержит два нуля.
              См. также getauxval(3).

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/cgroup (начиная с Linux 2.6.24)
              См. cgroups(7).

       /proc/[pid]/clear_refs (начиная с Linux 2.6.22)

              Это файл только для записи, доступный для записи только владельцу
              процесса.

              В файл можно записать следующие значения:

              1 (начиная с Linux 2.6.22)
                     Сбросить биты PG_Referenced и ACCESSED/YOUNG для
                     всех страниц, связанных с процессом. (До
                     ядра 2.6.32 запись любого ненулевого значения в этот
                     файл имела такой эффект.)

              2 (начиная с Linux 2.6.32)
                     Сбросить биты PG_Referenced и ACCESSED/YOUNG для
                     всех анонимных страниц, связанных с процессом.

              3 (начиная с Linux 2.6.32)
                     Сбросить биты PG_Referenced и ACCESSED/YOUNG для
                     всех страниц, отображенных в файл, связанных с процессом.

              Очистка битов PG_Referenced и ACCESSED/YOUNG
              предоставляет метод для приблизительного измерения объема памяти,
              используемой процессом. Сначала проверяются значения в
              полях "Referenced" для VMA, отображаемых в
              /proc/[pid]/smaps, чтобы получить представление о потреблении памяти
              процессом. Затем очищаются биты PG_Referenced и
              ACCESSED/YOUNG и, после некоторого измеренного временного
              интервала, снова проверяются значения в
              полях "Referenced", чтобы получить представление об изменении потребления
              памяти процессом за измеренный интервал.
              Если интересуют только выбранные типы
              отображений, то вместо значения 1 можно использовать 2 или 3.

              Могут быть записаны дополнительные значения для влияния на различные
              свойства:

              4 (начиная с Linux 3.11)
                     Очистить бит soft-dirty для всех страниц,
                     связанных с процессом. Это используется (в
                     сочетании с /proc/[pid]/pagemap
                     для восстановления системы, чтобы обнаружить, какие страницы
                     процесса были изменены с момента записи в файл
                     /proc/[pid]/clear_refs.

              5 (начиная с Linux 4.0)
                     Сбросить пиковый размер резидентного набора ("отметку наивысшего уровня")
                     до текущего значения размера резидентного набора процесса.

              Запись любого значения в файл /proc/[pid]/clear_refs, кроме
              перечисленных выше, не имеет эффекта.

              Файл /proc/[pid]/clear_refs присутствует только если
              включена опция конфигурации ядра CONFIG_PROC_PAGE_MONITOR.

       /proc/[pid]/cmdline
              Этот файл, доступный только для чтения, содержит полную командную строку
              процесса, если процесс не является зомби. В
              последнем случае, в этом файле ничего нет: то есть
              чтение этого файла вернет 0 символов. Аргументы командной
              строки представлены в этом файле как набор строк,
              разделенных нулевыми байтами ('\0'), с дополнительным нулевым байтом
              после последней строки.

              Если после выполнения execve(2) процесс изменяет свои строки argv,
              эти изменения будут видны здесь. Это не то
              же самое, что изменение массива argv.

              Кроме того, процесс может изменить местоположение памяти,
              на которое ссылается этот файл, с помощью операций prctl(2), таких как
              PR_SET_MM_ARG_START.

              Думайте об этом файле как о командной строке, которую процесс
              хочет, чтобы вы видели.

       /proc/[pid]/comm (начиная с Linux 2.6.33)
              Этот файл предоставляет значение comm процесса — то есть,
              имя команды, связанное с процессом. Разные
              потоки в одном процессе могут иметь разные значения comm,
              доступные через /proc/[pid]/task/[tid]/comm. Поток может изменить свой comm
              поток в той же группе потоков (см. обсуждение
              CLONE_THREAD в clone(2)), записав в файл
              /proc/self/task/[tid]/comm. Строки длиннее
              TASK_COMM_LEN (16) символов (включая завершающий
              нулевой байт) молча обрезаются.

              Этот файл предоставляет расширенный набор операций prctl(2) PR_SET_NAME
              и PR_GET_NAME, и используется функцией
              pthread_setname_np(3) при переименовании потоков, отличных
              от вызывающего. Значение в этом файле используется для
              спецификатора %e в /proc/sys/kernel/core_pattern; см.
              core(5).

       /proc/[pid]/coredump_filter
              См. core(5).

       /proc/[pid]/cpuset (начиная с Linux 2.6.12)
              См. cpuset(7).

       /proc/[pid]/cwd
              Это символическая ссылка на текущий рабочий каталог
              процесса. Чтобы узнать текущий рабочий каталог
              процесса 20, например, вы можете сделать следующее:

                  $ cd /proc/20/cwd; pwd -P

              В многопоточном процессе содержимое этой символической
              ссылки недоступно, если основной поток уже
              завершился (обычно вызовом pthread_exit(3)).

              Разрешение на разыменование или чтение (readlink(2))
              символической ссылки регулируется проверкой режима доступа ptrace
              PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/environ
              Этот файл содержит начальное окружение, которое было установлено,
              когда текущая выполняемая программа была запущена через
              execve(2). Записи разделены нулевыми байтами
              ('\0'), и в конце может быть нулевой байт. Таким образом, чтобы
              вывести окружение процесса 1, вы можете сделать:

                  $ cat /proc/1/environ | tr '\000' '\n'

              Если после execve(2) процесс изменяет своё
              окружение (например, вызывая функции типа putenv(3)
              или напрямую изменяя переменную environ(7)), этот файл
              не будет отражать эти изменения.

              Кроме того, процесс может изменить расположение в памяти, на которое
              ссылается этот файл, через операции prctl(2), такие как
              PR_SET_MM_ENV_START.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/exe
              В Linux 2.2 и более поздних версиях этот файл является символической ссылкой,
              содержащей фактический путь выполняемой команды.
              Эта символическая ссылка может быть разыменована обычным образом;
              попытка открыть её откроет исполняемый файл. Вы можете
              даже набрать /proc/[pid]/exe, чтобы запустить ещё одну копию того же
              исполняемого файла, который выполняется процессом [pid]. Если
              путь к файлу был отсоединён, символическая ссылка будет содержать
              строку '(deleted)', добавленную к исходному пути.
              В многопоточном процессе содержимое этой символической
              ссылки недоступно, если основной поток уже
              завершился (обычно вызовом pthread_exit(3)).

              Разрешение на разыменование или чтение (readlink(2)) этой
              символической ссылки регулируется проверкой режима доступа ptrace
              PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

              В Linux 2.0 и более ранних версиях, /proc/[pid]/exe - это указатель
              на бинарный файл, который был выполнен, и отображается как
              символическая ссылка. Вызов readlink(2) для этого файла в
              Linux 2.0 возвращает строку в формате:

                  [device]:inode

              Например, [0301]:1502 будет обозначать inode 1502 на устройстве
              с основным номером 03 (IDE, MFM, и т. д. диски) и дополнительным номером 01 (первый раздел
              на первом диске).

              find(1) с опцией -inum может быть использован для поиска
              файла.

       /proc/[pid]/fd/
              Это подкаталог, содержащий одну запись для каждого файла,
              открытого процессом, названную по его файловому дескриптору,
              которая является символической ссылкой на фактический файл.
              Таким образом, 0 - это стандартный ввод, 1 - стандартный вывод,
              2 - стандартная ошибка и так далее.

              Для файловых дескрипторов для каналов (pipes) и сокетов, записи
              будут символическими ссылками, содержимое которых представляет
              тип файла с индексным дескриптором (inode). Вызов readlink(2)
              для этого файла возвращает строку в формате:

                  type:[inode]

              Например, socket:[2248868] будет сокетом, и его
              индексный дескриптор - 2248868. Для сокетов этот индексный 
              дескриптор можно использовать для поиска дополнительной 
              информации в одном из файлов в каталоге /proc/net/.

              Для файловых дескрипторов, не имеющих соответствующего 
              индексного дескриптора (например, файловые дескрипторы,
              созданные функциями bpf(2), epoll_create(2), eventfd(2),
              inotify_init(2), perf_event_open(2), signalfd(2), 
              timerfd_create(2) и userfaultfd(2)), запись будет 
              символической ссылкой с содержимым вида

                  anon_inode:<file-type>

              Во многих случаях (но не всех) file-type окружен
              квадратными скобками.

              Например, дескриптор файла epoll будет иметь символическую
              ссылку, содержимое которой - строка anon_inode:[eventpoll].

              В многопоточном процессе содержимое этого каталога
              недоступно, если основной поток уже
              завершился (обычно вызовом pthread_exit(3)).

              Программы, которые принимают имя файла в качестве аргумента командной строки,
              но не принимают ввод из стандартного ввода, если аргумент не
              предоставлен, и программы, которые записывают в файл, указанный в
              аргументе командной строки, но не отправляют свой вывод в
              стандартный вывод, если аргумент не предоставлен, могут
              тем не менее быть настроены на использование стандартного ввода или стандартного
              вывода, используя файлы /proc/[pid]/fd в качестве аргументов командной
              строки. Например, предполагая, что -i - это флаг,
              обозначающий входной файл, а -o - флаг, обозначающий
              выходной файл:

                  $ foobar -i /proc/self/fd/0 -o /proc/self/fd/1 ...

              и у вас есть рабочий фильтр.

              /proc/self/fd/N примерно то же самое, что и /dev/fd/N в
              некоторых системах UNIX и UNIX-подобных системах. Большинство скриптов Linux MAKEDEV
              символически связывают /dev/fd с /proc/self/fd, по
              факту.

              Большинство систем предоставляют символические ссылки /dev/stdin,
              /dev/stdout и /dev/stderr, которые соответственно связываются с
              файлами 0, 1 и 2 в /proc/self/fd. Таким образом, пример
              команды выше можно записать как:

                  $ foobar -i /dev/stdin -o /dev/stdout ...

              Разрешение на разыменование или чтение (readlink(2)) 
              символических ссылок в этом каталоге регулируется проверкой 
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

              Обратите внимание, что для файловых дескрипторов, ссылающихся на 
              inode (трубы и сокеты, см. выше), эти inode все еще имеют 
              биты разрешений и информацию о владельце, отличные от 
              записи /proc/[pid]/fd, и владелец может 
              отличаться от идентификаторов пользователя и группы процесса. 
              Непривилегированный процесс может не иметь разрешения на их открытие, 
              как в этом примере:

                  $ echo test | sudo -u nobody cat
                  test
                  $ echo test | sudo -u nobody cat /proc/self/fd/0
                  cat: /proc/self/fd/0: Permission denied

              Файловый дескриптор 0 ссылается на трубу, созданную оболочкой
              и принадлежащую пользователю этой оболочки, который не является nobody, поэтому
              cat не имеет разрешения на создание нового файлового дескриптора 
              для чтения из этого inode, хотя он все еще может 
              читать из своего существующего файлового дескриптора 0.

       /proc/[pid]/fdinfo/ (с Linux 2.6.22)
              Это подкаталог, содержащий одну запись для каждого файла,
              который открыт процессом, названный по его файловому дескриптору.
              Файлы в этом каталоге доступны для чтения только владельцу
              процесса. Содержимое каждого файла можно прочитать для
              получения информации о соответствующем файловом
              дескрипторе. Содержимое зависит от типа файла,
              на который ссылается соответствующий файловый дескриптор.

              Для обычных файлов и каталогов мы видим что-то вроде:

                  $ cat /proc/12015/fdinfo/4
                  pos:    1000
                  flags:  01002002
                  mnt_id: 21

              Поля следующие:

              pos    Это десятичное число, показывающее смещение файла.

              flags  Это восьмеричное число, которое отображает режим
                     доступа к файлу и флаги состояния файла (см. open(2)).
                     Если установлен флаг дескриптора close-on-exec,
                     то flags также будет включать значение O_CLOEXEC.

                     До Linux 3.1 это поле некорректно отображало
                     установку O_CLOEXEC на момент открытия файла,
                     а не текущую настройку флага close-on-exec.

              mnt_id Это поле, присутствующее с Linux 3.15, является ID
                     монтирования, содержащего этот файл. См.
                     описание /proc/[pid]/mountinfo.

              Для файловых дескрипторов eventfd (см. eventfd(2)), мы видим
              (начиная с Linux 3.8) следующие поля:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  eventfd-count:               40

              eventfd-count - текущее значение счетчика eventfd в
              шестнадцатеричном формате.

              Для файловых дескрипторов epoll (см. epoll(7)), мы видим (начиная с
              Linux 3.8) следующие поля:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  tfd:        9 events:       19 data: 74253d2500000009
                  tfd:        7 events:       19 data: 74253d2500000007

              Каждая из строк, начинающихся с tfd, описывает один из файловых
              дескрипторов, отслеживаемых через файловый дескриптор epoll
              (см. epoll_ctl(2) для получения некоторых деталей). Поле tfd - это
              номер файлового дескриптора. Поле events - это
              шестнадцатеричная маска событий, отслеживаемых для этого
              файлового дескриптора. Поле data - это значение данных,
              связанное с этим файловым дескриптором.

              Для файловых дескрипторов signalfd (см. signalfd(2)), мы видим
              (начиная с Linux 3.8) следующие поля:

                  pos: 0
                  flags:    02
                  mnt_id:   10
                  sigmask:  0000000000000006

              sigmask — шестнадцатеричная маска сигналов, которые 
              принимаются через этот файловый дескриптор signalfd. 
              (В этом примере установлены биты 2 и 3, соответствующие 
              сигналам SIGINT и SIGQUIT; см. signal(7).)

              Для файловых дескрипторов inotify (см. inotify(7)), мы видим
              (начиная с Linux 3.8) следующие поля:

                  pos: 0
                  flags:    00
                  mnt_id:   11
                  inotify wd:2 ino:7ef82a sdev:800001 mask:800afff ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:2af87e00220ffd73
                  inotify wd:1 ino:192627 sdev:800001 mask:800afff ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:27261900802dfd73

              Каждая строка, начинающаяся с "inotify", отображает
              информацию об одном файле или каталоге, который отслеживается.
              Поля в этой строке следующие:

              wd     Номер дескриптора наблюдения (в десятичной системе).

              ino    Номер inode целевого файла (в шестнадцатеричной системе).

              sdev   ID устройства, на котором находится целевой файл
                     (в шестнадцатеричной системе).

              mask   Маска отслеживаемых событий для целевого файла
                     (в шестнадцатеричной системе).

              Если ядро было собрано с поддержкой exportfs, путь к
              целевому файлу представлен в виде дескриптора файла через три
              шестнадцатеричных поля: fhandle-bytes, fhandle-type и
              f_handle.

              Для файловых дескрипторов fanotify (см. fanotify(7)), мы видим
              (начиная с Linux 3.8) следующие поля:

                  pos: 0
                  flags:    02
                  mnt_id:   11
                  fanotify flags:0 event-flags:88002
                  fanotify ino:19264f sdev:800001 mflags:0 mask:1 ignored_mask:0 fhandle-bytes:8 fhandle-type:1 f_handle:4f261900a82dfd73

              Четвертая строка отображает информацию, определенную при создании
              группы fanotify через fanotify_init(2):

              flags  Аргумент flags, переданный fanotify_init(2)
                     (выраженный в шестнадцатеричном формате).

              event-flags
                     Аргумент event_f_flags, переданный
                     fanotify_init(2) (выраженный в шестнадцатеричном формате).

              Каждая дополнительная строка, показанная в файле, содержит
              информацию об одной из меток в группе fanotify.
              Большинство этих полей аналогичны inotify, за исключением:

              mflags Флаги, связанные с меткой (выраженные в
                     шестнадцатеричном формате).

              mask   Маска событий для этой метки (выраженная в
                     шестнадцатеричном формате).

              ignored_mask
                     Маска событий, которые игнорируются для этой метки
                     (выраженная в шестнадцатеричном формате).

              Подробнее об этих полях см. fanotify_mark(2).

              Для файловых дескрипторов timerfd (см. timerfd(2)), мы видим
              (начиная с Linux 3.17) следующие поля:

                  pos:    0
                  flags:  02004002
                  mnt_id: 13
                  clockid: 0
                  ticks: 0
                  settime flags: 03
                  it_value: (7695568592, 640020877)
                  it_interval: (0, 0)

              clockid
                     Это числовое значение идентификатора часов
                     (соответствующее одной из констант CLOCK_*,
                     определенных в <time.h>), которое используется для
                     отслеживания прогресса таймера (в этом примере 0 - это
                     CLOCK_REALTIME).

              ticks  Это количество истечений таймера, которые
                     произошли (т.е. значение, которое вернул бы read(2)).

              settime flags
                     Это поле перечисляет флаги, с которыми таймерfd
                     был последний раз активирован (см. timerfd_settime(2)),
                     в восьмеричной системе (в этом примере установлены
                     как TFD_TIMER_ABSTIME, так и TFD_TIMER_CANCEL_ON_SET).

              it_value
                     Это поле содержит время до следующего истечения
                     таймера, выраженное в секундах и наносекундах.
                     Это всегда выражается как относительное значение,
                     независимо от того, был ли таймер создан с
                     использованием флага TFD_TIMER_ABSTIME.

              it_interval
                     Это поле содержит интервал таймера в
                     секундах и наносекундах. (Поля it_value и
                     it_interval содержат значения, которые
                     timerfd_gettime(2) для этого файлового дескриптора
                     возвращает.)

       /proc/[pid]/gid_map (начиная с Linux 3.5)
              См. user_namespaces(7).

       /proc/[pid]/io (начиная с ядра 2.6.20)
              Этот файл содержит статистику ввода-вывода для процесса, например:

                  # cat /proc/3828/io
                  rchar: 323934931
                  wchar: 323929600
                  syscr: 632687
                  syscw: 632675
                  read_bytes: 0
                  write_bytes: 323932160
                  cancelled_write_bytes: 0

              Поля следующие:

              rchar: прочитанные символы
                     Количество байтов, которые этот процесс вызвал для
                     чтения из хранилища. Это просто сумма
                     байтов, которые этот процесс передал в read(2) и
                     подобные системные вызовы. Включает такие вещи как
                     ввод-вывод терминала и не зависит от того,
                     требовался ли фактический физический ввод-вывод диска (чтение
                     могло быть удовлетворено из pagecache).

              wchar: записанные символы
                     Количество байт, которые этот процесс вызвал или
                     вызовет для записи на диск. Здесь применяются
                     аналогичные предостережения, как и с rchar.

              syscr: системные вызовы чтения
                     Попытка подсчитать количество операций чтения
                     ввода-вывода—то есть системных вызовов, таких
                     как read(2) и pread(2).

              syscw: системные вызовы записи
                     Попытка подсчитать количество операций записи
                     ввода-вывода—то есть системных вызовов, таких
                     как write(2) и pwrite(2).

              read_bytes: прочитанные байты
                     Попытка подсчитать количество байт, которые этот
                     процесс действительно вызвал для извлечения из
                     уровня хранения. Это точно для файловых систем,
                     основанных на блоках.

              write_bytes: записанные байты
                     Попытка подсчитать количество байт, которые этот
                     процесс вызвал для отправки на уровень хранения.

              cancelled_write_bytes:
                     Большая неточность здесь связана с усечением. Если процесс
                     записывает 1 МБ в файл, а затем удаляет файл, фактически
                     запись не произойдет. Но это будет учтено как запись 1 МБ.
                     Другими словами: это поле представляет количество
                     байт, которые этот процесс привел к тому, что они не были записаны,
                     путем усечения кэша страниц. Задача может вызвать и "отрицательный"
                     ввод-вывод. Если эта задача усекает некоторый грязный
                     кэш страниц, некоторые операции ввода-вывода, которые были учтены
                     для другой задачи (в ее write_bytes), не будут
                     происходить.

              Примечание: В текущей реализации есть некоторая несогласованность
              на 32-битных системах: если процесс A читает
              /proc/[pid]/io процесса B, в то время как процесс B обновляет один из этих
              64-битных счетчиков, процесс A может увидеть промежуточный
              результат.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/limits (начиная с Linux 2.6.24)
              Этот файл отображает мягкий лимит, жесткий лимит и единицы
              измерения для каждого из ресурсных ограничений процесса
              (см. getrlimit(2)). До версии Linux 2.6.35 включительно,
              этот файл защищен и разрешает чтение только реальному
              UID процесса. Начиная с Linux 2.6.36, этот файл
              доступен для чтения всем пользователям системы.

       /proc/[pid]/map_files/ (начиная с ядра 3.3)
              Этот подкаталог содержит записи, соответствующие
              файлам, отображенным в память (см. mmap(2)). Записи названы
              по паре начального и конечного адреса области памяти (выраженных
              в шестнадцатеричных числах) и являются символическими ссылками
              на сами отображенные файлы. Вот пример, с выводом,
              перенесенным и переформатированным для соответствия дисплею в 80 столбцов:

                  # ls -l /proc/self/map_files/
                  lr--------. 1 root root 64 Apr 16 21:31
                              3252e00000-3252e20000 -> /usr/lib64/ld-2.15.so
                  ...

              Хотя эти записи присутствуют для областей памяти, которые
              были отображены с флагом MAP_FILE, способ реализации
              анонимной общей памяти (регионы, созданные с флагами
              MAP_ANON | MAP_SHARED) в Linux означает, что такие
              регионы также отображаются в этом каталоге. Вот пример,
              где целевым файлом является удаленный файл /dev/zero:

                  lrw-------. 1 root root 64 Apr 16 21:33
                              7fc075d2f000-7fc075e6f000 -> /dev/zero (deleted)

              Разрешение на доступ к этому файлу регулируется проверкой 
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

              До версии ядра 4.3 этот каталог появлялся только при 
              включенной опции конфигурации ядра CONFIG_CHECKPOINT_RESTORE.

              Для чтения содержимого символических ссылок в этом каталоге
              требуются возможности: до Linux 5.9 процесс чтения требовал
              CAP_SYS_ADMIN в исходном пользовательском пространстве имён;
              начиная с Linux 5.9, процесс чтения должен иметь либо
              CAP_SYS_ADMIN, либо CAP_CHECKPOINT_RESTORE в пользовательском
              пространстве имён, в котором он находится.

       /proc/[pid]/maps
              Файл, содержащий текущие отображаемые области памяти и
              права доступа к ним. См. mmap(2) для получения дополнительной
              информации об отображениях памяти.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

              Формат файла:

                  адрес            права смещение  устр  inode       путь
                  00400000-00452000 r-xp 00000000 08:02 173521      /usr/bin/dbus-daemon
                  00651000-00652000 r--p 00051000 08:02 173521      /usr/bin/dbus-daemon
                  00652000-00655000 rw-p 00052000 08:02 173521      /usr/bin/dbus-daemon
                  00e03000-00e24000 rw-p 00000000 00:00 0           [куча]
                  00e24000-011f7000 rw-p 00000000 00:00 0           [куча]
                  ...
                  35b1800000-35b1820000 r-xp 00000000 08:02 135522  /usr/lib64/ld-2.15.so
                  35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522  /usr/lib64/ld-2.15.so
                  35b1a20000-35b1a21000 rw-p 00020000 08:02 135522  /usr/lib64/ld-2.15.so
                  35b1a21000-35b1a22000 rw-p 00000000 00:00 0
                  35b1c00000-35b1dac000 r-xp 00000000 08:02 135870  /usr/lib64/libc-2.15.so
                  35b1dac000-35b1fac000 ---p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so
                  35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so
                  35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870  /usr/lib64/libc-2.15.so
                  ...
                  f2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0    [стек:986]
                  ...
                  7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0   [стек]
                  7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0   [vdso]

              Поле адреса — это адресное пространство в процессе, 
              которое занимает отображение. Поле perms — это набор 
              разрешений:

                  r = чтение
                  w = запись
                  x = выполнение
                  s = общий доступ
                  p = приватный (копирование при записи)

              Поле offset — это смещение в файле/чем-либо; dev 
              это устройство (major:minor); inode — это инод на этом 
              устройстве. 0 указывает на то, что с областью памяти 
              не связан инод, как это было бы в случае с BSS 
              (неинициализированными данными).

              Поле pathname обычно будет файлом, который 
              поддерживает отображение. Для ELF-файлов можно легко 
              скоординировать с полем смещения, просмотрев поле Offset 
              в заголовках программы ELF (readelf -l).

              Существуют дополнительные полезные псевдо-пути:

              [stack]
                     Стек исходного процесса (также известного как стек 
                     основного потока).

              [stack:<tid>] (от Linux 3.4 до 4.4)
                     Стек потока (где <tid> — идентификатор потока).
                     Он соответствует пути /proc/[pid]/task/[tid]/.
                     Это поле было удалено в Linux 4.5, так как
                     предоставление этой информации для процесса с большим
                     количеством потоков требует больших ресурсов.

              [vdso] Виртуальный динамически связанный общий объект. См. 
                     vdso(7).

              [heap] Куча процесса.

              Если поле pathname пусто, это анонимное отображение, 
              полученное через mmap(2). Нет простого способа сопоставить 
              его с исходным кодом процесса, кроме как прогнать его через 
              gdb(1), strace(1) или подобные инструменты.

              pathname показывается без экранирования, за исключением 
              символов новой строки, которые заменяются восьмеричной 
              escape-последовательностью. В результате невозможно 
              определить, содержал ли исходный pathname символ новой 
              строки или буквальную последовательность символов \012.

              Если отображение основано на файле, и файл был удален, 
              к pathname добавляется строка " (deleted)". Обратите внимание, 
              что это тоже неоднозначно.

              В Linux 2.0 нет поля, указывающего pathname.

       /proc/[pid]/mem
              Этот файл можно использовать для доступа к страницам памяти 
              процесса с помощью open(2), read(2) и lseek(2).

              Разрешение на доступ к этому файлу регулируется проверкой 
              режима доступа ptrace PTRACE_MODE_ATTACH_FSCREDS; см. 
              ptrace(2).

       /proc/[pid]/mountinfo (начиная с Linux 2.6.26)
              Этот файл содержит информацию о точках монтирования в
              пространстве имен монтирования процесса (см. mount_namespaces(7)).
              Он предоставляет различную информацию (например, состояние
              распространения, корень монтирования для bind-монтирований,
              идентификатор для каждого монтирования и его родителя), которая
              отсутствует в (более старом) файле /proc/[pid]/mounts,
              и исправляет различные другие проблемы с этим файлом (например,
              нерасширяемость, невозможность различать параметры для конкретного
              монтирования и суперблока).

              Файл содержит строки следующего вида:

              36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue
              (1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)

              Числа в скобках — это метки для описаний ниже:

              (1)  ID монтирования: уникальный идентификатор для точки
                   монтирования (может быть повторно использован после
                   umount(2)).

              (2)  ID родителя: идентификатор родительского монтирования (или
                   самого себя для корня дерева монтирования этого пространства
                   имен монтирования).

                   Если новый монтированный объект наложен поверх предыдущего
                   существующего монта (так, что скрывает существующий монт)
                   по пути P, то родительским для нового монта является
                   предыдущий монт в этом месте. Таким образом, при
                   рассмотрении всех монтированных объектов, наложенных в конкретном
                   месте, верхний монт — это тот, который не является
                   родительским для любого другого монта в том же месте.
                   (Обратите внимание, однако, что этот верхний монт будет
                   доступен, только если самый длинный подпрефикс пути P,
                   который является точкой монтирования, сам не скрыт
                   наложенным монтом.)

                   Если родительский монт находится за пределами корневого
                   каталога процесса (см. chroot(2)), ID, показанный здесь,
                   не будет иметь соответствующей записи в mountinfo, у которой
                   mount ID (поле 1) совпадает с этим ID родительского монта (потому что
                   монты, находящиеся за пределами корневого каталога процесса,
                   не отображаются в mountinfo). Как особый случай
                   этого пункта, корневой монт процесса может иметь
                   родительский монт (для файловой системы initramfs), который находится
                   за пределами корневого каталога процесса, и запись
                   для этого монта не появится в mountinfo.

              (3)  major:minor: значение st_dev для файлов в этой
                   файловой системе (см. stat(2)).

              (4)  root: путь к каталогу в файловой системе, который
                   образует корень этой точки монтирования.

              (5)  mount point: путь к точке монтирования относительно
                   корневого каталога процесса.

              (6)  mount options: параметры для каждой точки монтирования (см. mount(2)).

              (7)  optional fields: ноль или более полей формата
                   "тег[:значение]"; см. ниже.

              (8)  separator: конец необязательных полей обозначается
                   одиночным дефисом.

              (9)  filesystem type: тип файловой системы в формате
                   "тип[.подтип]".

              (10) mount source: информация, специфичная для файловой системы, или
                   "none".

              (11) super options: параметры для каждого суперблока (см. mount(2)).

              В настоящее время возможные необязательные поля: shared,
              master, propagate_from и unbindable.  См.
              mount_namespaces(7) для описания этих полей.
              Анализаторы должны игнорировать все нераспознанные необязательные поля.

              Для получения дополнительной информации о распространении точек монтирования см.:
              Documentation/filesystems/sharedsubtree.txt в дереве
              исходного кода ядра Linux.

       /proc/[pid]/mounts (начиная с Linux 2.4.19)
              Этот файл перечисляет все файловые системы, в настоящее время смонтированные в
              пространстве имен монтирования процесса (см. mount_namespaces(7)).
              Формат этого файла задокументирован в fstab(5).

              Начиная с версии ядра 2.6.15, этот файл доступен для опроса: после
              открытия файла для чтения, изменение в этом файле (т.е.,
              монтирование или размонтирование файловой системы) вызывает select(2) для пометки
              файлового дескриптора как имеющего исключительное состояние,
              а poll(2) и epoll_wait(2) помечают файл как имеющий
              приоритетное событие (POLLPRI). (До Linux 2.6.30, изменение
              в этом файле обозначалось файловым дескриптором, помеченным
              как доступный для чтения для select(2), и помеченным
              как имеющий ошибочное состояние для poll(2) и epoll_wait(2).)

       /proc/[pid]/mountstats (начиная с Linux 2.6.17)
              Этот файл экспортирует информацию (статистику, конфигурационную
              информацию) о монтированиях в пространстве имен монтирования процесса
              (см. mount_namespaces(7)). Строки в этом файле
              имеют форму:

                  device /dev/sda7 mounted on /home with fstype ext3 [stats]
                  (       1      )            ( 2 )             (3 ) (  4  )

              Поля в каждой строке:

              (1)  Имя смонтированного устройства (или "nodevice", если
                   нет соответствующего устройства).

              (2)  Точка монтирования в дереве файловой системы.

              (3)  Тип файловой системы.

              (4)  Опциональная статистика и конфигурационная информация.
                   В настоящее время (по состоянию на Linux 2.6.26), только файловые системы NFS
                   экспортируют информацию через это поле.

              Этот файл доступен для чтения только владельцу процесса.

       /proc/[pid]/net (начиная с Linux 2.6.25)
              См. описание /proc/net.

       /proc/[pid]/ns/ (начиная с Linux 3.0)
              Это подкаталог, содержащий одну запись для каждого
              пространства имен, которое поддерживает манипуляции с помощью setns(2).
              Для получения дополнительной информации см. namespaces(7).

       /proc/[pid]/numa_maps (начиная с Linux 2.6.14)
              См. numa(7).

       /proc/[pid]/oom_adj (начиная с Linux 2.6.11)
              Этот файл можно использовать для корректировки оценки, используемой для выбора
              какой процесс должен быть завершен в ситуации нехватки памяти (OOM).
              Ядро использует это значение для операции побитового сдвига
              значения oom_score процесса: допустимые значения
              находятся в диапазоне от -16 до +15, плюс специальное значение -17,
              которое полностью отключает OOM-завершение для этого процесса. Положительная
              оценка увеличивает вероятность завершения этого процесса OOM-киллером; 
              отрицательная оценка уменьшает вероятность.

              Значение по умолчанию для этого файла равно 0; новый процесс
              наследует настройку oom_adj своего родителя. Процесс должен иметь
              привилегии (CAP_SYS_RESOURCE) для обновления этого файла.

              Начиная с Linux 2.6.36, использование этого файла считается устаревшим
              в пользу /proc/[pid]/oom_score_adj.

       /proc/[pid]/oom_score (начиная с Linux 2.6.11)
              Этот файл отображает текущую оценку, которую ядро присваивает
              этому процессу с целью выбора процесса для
              OOM-killer. Более высокая оценка означает, что процесс
              с большей вероятностью будет выбран OOM-killer. Основой
              для этой оценки является количество памяти, используемой
              процессом, с увеличениями (+) или уменьшениями (-) для факторов,
              включая:

              * имеет ли процесс привилегии (-).

              До ядра 2.6.36 следующие факторы также использовались
              при расчете oom_score:

              * создает ли процесс много дочерних процессов, используя
                fork(2) (+);

              * работает ли процесс долгое время или использовал
                много процессорного времени (-);

              * имеет ли процесс низкое значение nice (т.е., > 0)
                (+); и

              * выполняет ли процесс прямой доступ к оборудованию
                (-).

              Значение oom_score также отражает корректировку, указанную
              в настройках oom_score_adj или oom_adj для процесса.

       /proc/[pid]/oom_score_adj (начиная с Linux 2.6.36)
              Этот файл можно использовать для корректировки эвристики "плохости",
              используемой для выбора того, какой процесс будет завершен при
              условиях нехватки памяти.

              Эвристика плохости назначает каждой задаче-кандидату
              значение от 0 (никогда не убивать) до 1000 (всегда убивать)
              для определения того, какой процесс будет выбран в качестве
              цели. Единицы измерения примерно соответствуют доле от
              диапазона разрешенной памяти, которую процесс может
              выделить, на основе оценки его текущего использования
              памяти и свопа. Например, если задача использует всю
              разрешенную память, ее показатель плохости будет 1000.
              Если она использует половину разрешенной памяти, ее
              показатель будет 500.

              В показатель плохости включен дополнительный фактор:
              процессам с правами root предоставляется 3% дополнительной
              памяти по сравнению с другими задачами.

              Количество "разрешенной" памяти зависит от контекста,
              в котором был вызван OOM-killer. Если это связано с
              исчерпанием памяти, назначенной cpuset задачи, выполняющей
              выделение, разрешенная память представляет собой набор
              элементов mems, назначенных этому cpuset (см. cpuset(7)).
              Если это связано с исчерпанием узла(ов) mempolicy,
              разрешенная память представляет набор узлов mempolicy.
              Если это связано с достижением лимита памяти (или лимита
              свопа), разрешенная память - это настроенный лимит.
              Наконец, если это связано с нехваткой памяти во всей
              системе, разрешенная память представляет все доступные
              для выделения ресурсы.

              Значение oom_score_adj добавляется к оценке вредности
              перед тем, как она используется для определения задачи,
              которую следует завершить.
              Допустимые значения варьируются от -1000 (OOM_SCORE_ADJ_MIN) до
              +1000 (OOM_SCORE_ADJ_MAX). Это позволяет пользовательскому пространству
              управлять предпочтениями для OOM-завершения, начиная от
              всегда предпочитать определенную задачу или полностью отключить
              ее от OOM-завершения. Самое низкое возможное значение, -1000,
              эквивалентно полному отключению OOM-завершения для этой
              задачи, поскольку она всегда будет сообщать оценку вредности 0.

              Следовательно, для пользовательского пространства очень просто определить
              количество памяти, которое следует учитывать для каждой задачи. Настройка
              значения oom_score_adj на +500, например, примерно
              эквивалентна разрешению остальным задачам, совместно использующим
              те же ресурсы системы, cpuset, mempolicy или контроллера памяти,
              использовать как минимум на 50% больше памяти. Значение
              -500, с другой стороны, было бы примерно эквивалентно
              скидке 50% от разрешенной памяти задачи, учитываемой
              при подсчете оценки против задачи.

              Для обратной совместимости с предыдущими ядрами,
              /proc/[pid]/oom_adj все еще может использоваться для настройки оценки
              вредности. Его значение линейно масштабируется с oom_score_adj.

              Запись в /proc/[pid]/oom_score_adj или
              /proc/[pid]/oom_adj изменит другое значение с его масштабированным
              значением.

              Программа choom(1) предоставляет интерфейс командной строки для
              регулировки значения oom_score_adj запущенного процесса или
              вновь выполняемой команды.

       /proc/[pid]/pagemap (начиная с Linux 2.6.25)
              Этот файл показывает отображение каждой из виртуальных
              страниц процесса в физические страничные кадры или область подкачки.
              Он содержит одно 64-битное значение для каждой виртуальной страницы,
              с битами, установленными следующим образом:

              63     Если установлен, страница присутствует в ОЗУ.

              62     Если установлен, страница находится в пространстве подкачки

              61 (начиная с Linux 3.5)
                     Страница является файл-отображаемой страницей или разделяемой
                     анонимной страницей.

              60–57 (начиная с Linux 3.11)
                     Ноль

              56 (начиная с Linux 4.2)
                     Страница отображена эксклюзивно.

              55 (начиная с Linux 3.11)
                     PTE помечен как soft-dirty (см. файл исходного кода ядра
                     Documentation/admin-guide/mm/soft-dirty.rst).

              54–0   Если страница присутствует в ОЗУ (бит 63), то эти
                     биты предоставляют номер страничного кадра, который может быть
                     использован для индексации /proc/kpageflags и
                     /proc/kpagecount. Если страница присутствует в подкачке
                     (бит 62), то биты 4–0 указывают тип подкачки, а
                     биты 54–5 кодируют смещение подкачки.

              До Linux 3.11, биты 60–55 использовались для кодирования
              двоичного логарифма размера страницы.

              Для эффективного использования /proc/[pid]/pagemap, используйте
              /proc/[pid]/maps, чтобы определить, какие области памяти 
              фактически отображаются, и выполнять перемещение для пропуска 
              неотображаемых областей.

              Файл /proc/[pid]/pagemap присутствует только в том случае, если
              включена опция конфигурации ядра CONFIG_PROC_PAGE_MONITOR.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/personality (начиная с Linux 2.6.28)
              Этот файл, доступный только для чтения, показывает домен
              выполнения процесса, установленный функцией personality(2).
              Значение отображается в шестнадцатеричной записи.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_ATTACH_FSCREDS; см.
              ptrace(2).

       /proc/[pid]/root
              UNIX и Linux поддерживают идею корня файловой системы для каждого
              процесса, устанавливаемого системным вызовом chroot(2). Этот
              файл является символической ссылкой, которая указывает на
              корневой каталог процесса, и ведет себя так же, как exe и fd/*.

              Обратите внимание, что этот файл не просто символическая ссылка.
              Он предоставляет тот же вид файловой системы (включая
              пространства имён и набор монтирований каждого процесса),
              как и сам процесс. Пример иллюстрирует это. В
              одном терминале мы запускаем оболочку в новых пользовательском и
              пространствах имён монтирования, и в этой оболочке создаём новые монтирования:

                  $ PS1='sh1# ' unshare -Urnm
                  sh1# mount -t tmpfs tmpfs /etc  # Монтируем пустую tmpfs в /etc
                  sh1# mount --bind /usr /dev     # Монтируем /usr в /dev
                  sh1# echo $$
                  27123

              Во втором окне терминала, в исходном пространстве имён монтирования,
              мы смотрим содержимое соответствующих точек монтирования в исходном
              и новом пространствах имён:

                  $ PS1='sh2# ' sudo sh
                  sh2# ls /etc | wc -l                  # В исходном ПИ
                  309
                  sh2# ls /proc/27123/root/etc | wc -l  # /etc в другом ПИ
                  0                                     # Пустая директория tmpfs
                  sh2# ls /dev | wc -l                  # В исходном ПИ
                  205
                  sh2# ls /proc/27123/root/dev | wc -l  # /dev в другом ПИ
                  11                                    # На самом деле bind
                                                        # смонтирован в /usr
                  sh2# ls /usr | wc -l                  # /usr в исходном ПИ
                  11

              В многопоточном процессе содержимое символической ссылки
              /proc/[pid]/root недоступно, если основной поток уже
              завершился (обычно путем вызова pthread_exit(3)).

              Разрешение на разыменование или чтение (readlink(2)) этой
              символической ссылки регулируется проверкой режима доступа
              ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[pid]/projid_map (начиная с Linux 3.7)
              См. user_namespaces(7).

       /proc/[pid]/seccomp (Linux 2.6.12 до 2.6.22)
              Этот файл можно использовать для чтения и изменения настроек
              режима безопасных вычислений (seccomp) процесса. Он содержит
              значение 0, если процесс не находится в режиме seccomp, и 1,
              если процесс находится в строгом режиме seccomp (см. seccomp(2)).
              Запись 1 в этот файл безвозвратно переводит процесс в строгий
              режим seccomp. (Дальнейшие попытки записи в файл
              завершаются ошибкой EPERM.)

              В Linux 2.6.23 этот файл был удален и заменен операциями
              prctl(2) PR_GET_SECCOMP и PR_SET_SECCOMP (а позже
              seccomp(2) и полем Seccomp в /proc/[pid]/status).

       /proc/[pid]/setgroups (начиная с Linux 3.19)
              См. user_namespaces(7).

       /proc/[pid]/smaps (начиная с Linux 2.6.14)
              Этот файл показывает потребление памяти для каждого из
              отображений процесса. (Команда pmap(1) отображает похожую
              информацию в форме, которая может быть удобнее для парсинга.)
              Для каждого отображения имеется серия строк, таких как следующие:

                  00400000-0048a000 r-xp 00000000 fd:03 960637       /bin/bash
                  Size:                552 kB
                  Rss:                 460 kB
                  Pss:                 100 kB
                  Shared_Clean:        452 kB
                  Shared_Dirty:          0 kB
                  Private_Clean:         8 kB
                  Private_Dirty:         0 kB
                  Referenced:          460 kB
                  Anonymous:             0 kB
                  AnonHugePages:         0 kB
                  ShmemHugePages:        0 kB
                  ShmemPmdMapped:        0 kB
                  Swap:                  0 kB
                  KernelPageSize:        4 kB
                  MMUPageSize:           4 kB
                  KernelPageSize:        4 kB
                  MMUPageSize:           4 kB
                  Locked:                0 kB
                  ProtectionKey:         0
                  VmFlags: rd ex mr mw me dw

              Первая из этих строк показывает ту же информацию, которая
              отображается для отображения в /proc/[pid]/maps. 
              Следующие строки показывают размер отображения, количество
              отображения, которое в настоящее время находится в ОЗУ ("Rss"),
              пропорциональная доля процесса в этом отображении ("Pss"),
              количество чистых и грязных общих страниц в отображении,
              и количество чистых и грязных частных страниц в
              отображении. "Referenced" указывает объем памяти,
              в настоящее время отмеченной как указанной или доступной.
              "Anonymous" показывает количество памяти, которая не принадлежит
              какому-либо файлу. "Swap" показывает, сколько потенциально анонимной
              памяти также используется, но находится в swap.

              Строка "KernelPageSize" (доступна с Linux 2.6.29)
              - это размер страницы, используемый ядром для поддержки области
              виртуальной памяти. Это соответствует размеру, используемому MMU в
              большинстве случаев. Однако, один из контрпримеров встречается в
              ядрах PPC64, где ядро, использующее 64 кБ в качестве базового
              размера страницы, может по-прежнему использовать страницы размером 4 кБ
              для MMU на старых процессорах. Чтобы различить
              эти два атрибута, строка "MMUPageSize" (также доступна с Linux 2.6.29)
              сообщает размер страницы, используемый MMU.

              "Locked" указывает, заблокировано ли отображение
              в памяти или нет.

              Строка "ProtectionKey" (доступна начиная с Linux 4.9, только на
              x86) содержит ключ защиты памяти (см.
              pkeys(7)), связанный с областью виртуальной памяти. Эта
              запись присутствует только если ядро было собрано с
              опцией конфигурации CONFIG_X86_INTEL_MEMORY_PROTECTION_KEYS
              (начиная с Linux 4.6).

              Строка "VmFlags" (доступна начиная с Linux 3.8) представляет
              флаги ядра, связанные с областью виртуальной памяти,
              закодированные с использованием следующих двухбуквенных кодов:

                  rd  - доступен для чтения
                  wr  - доступен для записи
                  ex  - исполняемый
                  sh  - общий
                  mr  - может читать
                  mw  - может записывать
                  me  - может исполнять
                  ms  - может быть общим
                  gd  - сегмент стека растет вниз
                  pf  - чистый диапазон PFN
                  dw  - отключена запись в отображаемый файл
                  lo  - страницы заблокированы в памяти
                  io  - область отображения памяти ввода/вывода
                  sr  - предоставлен совет последовательного чтения
                  rr  - предоставлен совет случайного чтения
                  dc  - не копировать область при форке
                  de  - не расширять область при переотображении
                  ac  - область подлежит учету
                  nr  - пространство подкачки не зарезервировано для области
                  ht  - область использует огромные страницы tlb
                  sf  - выполнять синхронные ошибки страниц (начиная с Linux
              4.15)
                  nl  - нелинейное отображение (удалено в Linux 4.0)
                  ar  - архитектурно-зависимый флаг
                  wf  - очистка при форке (начиная с Linux 4.14)
                  dd  - не включать область в дамп ядра
                  sd  - флаг "soft-dirty" (начиная с Linux 3.13)
                  mm  - область смешанного отображения
                  hg  - флаг рекомендации огромных страниц
                  nh  - флаг рекомендации не использовать огромные страницы
                  mg  - флаг рекомендации объединения
                  um  - отслеживание отсутствующих страниц userfaultfd (начиная с Linux
              4.3)

                  uw  - отслеживание страниц userfaultfd wprotect (начиная с Linux
              4.3)

              Файл /proc/[pid]/smaps присутствует только если включена
              опция конфигурации ядра CONFIG_PROC_PAGE_MONITOR.

       /proc/[pid]/stack (начиная с Linux 2.6.29)
              Этот файл предоставляет символическую трассировку вызовов функций
              в стеке ядра этого процесса. Этот файл предоставляется
              только если ядро было собрано с опцией конфигурации
              CONFIG_STACKTRACE.

              Разрешение на доступ к этому файлу регулируется проверкой режима
              доступа ptrace PTRACE_MODE_ATTACH_FSCREDS; см.
              ptrace(2).

       /proc/[pid]/stat
              Информация о состоянии процесса. Используется
              ps(1). Определяется в файле исходного кода ядра
              fs/proc/array.c.

              Поля, по порядку, с соответствующими спецификаторами формата scanf(3),
              перечислены ниже. Отображение достоверной информации в некоторых
              из этих полей регулируется проверкой режима доступа ptrace
              PTRACE_MODE_READ_FSCREDS | PTRACE_MODE_NOAUDIT (см. ptrace(2)).
              Если проверка запрещает доступ, то значение поля отображается как
              0. Затронутые поля отмечены маркировкой
              [PT].

              (1) pid  %d
                     Идентификатор процесса.

              (2) comm  %s
                     Имя файла исполняемого файла в скобках.
                     Строки длиннее TASK_COMM_LEN (16) символов
                     (включая завершающий нулевой байт) молча
                     обрезаются. Это видно независимо от того, выгружен ли
                     исполняемый файл из памяти или нет.

              (3) state  %c
                     Один из следующих символов, указывающий состояние процесса:

                     R  Выполняется

                     S  Спит в прерываемом ожидании

                     D  Ожидает в непрерываемом дисковом сне

                     Z  Зомби

                     T  Остановлен (по сигналу) или (до Linux 2.6.33)
                        остановлен для трассировки

                     t  Остановлен для трассировки (начиная с Linux 2.6.33)

                     W  Подкачка (только до Linux 2.6.0)

                     X  Мертвый (начиная с Linux 2.6.0)

                     x  Мертвый (только с Linux 2.6.33 до 3.13)

                     K  Wakekill (только с Linux 2.6.33 до 3.13)

                     W  Пробуждение (только с Linux 2.6.33 до 3.13)

                     P  Припаркован (только с Linux 3.9 до 3.13)

              (4) ppid  %d
                     PID родителя этого процесса.

              (5) pgrp  %d
                     ID группы процессов для этого процесса.

              (6) session  %d
                     ID сессии процесса.

              (7) tty_nr  %d
                     Управляющий терминал процесса. (Младший
                     номер устройства содержится в комбинации
                     битов с 31 по 20 и с 7 по 0; старший номер
                     устройства находится в битах с 15 по 8.)

              (8) tpgid  %d
                     Идентификатор группы процессов переднего плана
                     управляющего терминала процесса.

              (9) flags  %u
                     Слово флагов ядра для процесса. Для значений
                     битов см. определения PF_* в исходном файле
                     ядра Linux include/linux/sched.h. Детали зависят
                     от версии ядра.

                     Формат этого поля был %lu до Linux 2.6.

              (10) minflt  %lu
                     Количество незначительных ошибок страниц, которые
                     процесс совершил и которые не требовали загрузки
                     страницы памяти с диска.

              (11) cminflt  %lu
                     Количество незначительных ошибок страниц, которые
                     совершили ожидаемые дочерние процессы.

              (12) majflt  %lu
                     Количество значительных ошибок страниц, которые
                     процесс совершил и которые требовали загрузки
                     страницы памяти с диска.

              (13) cmajflt  %lu
                     Количество значительных ошибок страниц, которые
                     совершили ожидаемые дочерние процессы.

              (14) utime  %lu
                     Количество времени, в течение которого этот процесс был запланирован
                     в пользовательском режиме, измеренное в тактах часов (разделить на
                     sysconf(_SC_CLK_TCK)). Это включает guest time,
                     guest_time (время, проведенное за работой виртуального ЦП, см.
                     ниже), так что приложения, которые не знают о
                     поле guest time, не теряют это время из
                     своих расчетов.

              (15) stime  %lu
                     Количество времени, в течение которого этот процесс был запланирован
                     в режиме ядра, измеренное в тактах часов (разделить на
                     sysconf(_SC_CLK_TCK)).

              (16) cutime  %ld
                     Количество времени, в течение которого ожидаемые
                     дочерние процессы этого процесса были запланированы в пользовательском режиме, измеренное
                     в тактах часов (разделить на sysconf(_SC_CLK_TCK)).
                     (См. также times(2).) Это включает guest time,
                     cguest_time (время, проведенное за работой виртуального ЦП, см.
                     ниже).

              (17) cstime  %ld
                     Количество времени, в течение которого ожидаемые
                     дочерние процессы этого процесса были запланированы в режиме ядра,
                     измеренное в тактах часов (разделить на
                     sysconf(_SC_CLK_TCK)).

              (18) priority  %ld
                     (Объяснение для Linux 2.6) Для процессов, работающих с 
                     политикой планирования реального времени (политика ниже; см. 
                     sched_setscheduler(2)), это отрицательный 
                     приоритет планирования минус один; то есть, число 
                     в диапазоне от -2 до -100, соответствующее приоритетам реального 
                     времени от 1 до 99. Для процессов, работающих под 
                     не-реалтайм политикой планирования, это исходное 
                     значение nice (setpriority(2)), как представлено в 
                     ядре. Ядро хранит значения nice как числа 
                     в диапазоне от 0 (высокий) до 39 (низкий), соответствующие 
                     видимому пользователю диапазону nice от -20 до 19.

                     До Linux 2.6, это было масштабированное значение на основе 
                     весового коэффициента планировщика, присвоенного этому процессу.

              (19) nice  %ld
                     Значение nice (см. setpriority(2)), значение в 
                     диапазоне от 19 (низкий приоритет) до -20 (высокий приоритет).

              (20) num_threads  %ld
                     Количество потоков в этом процессе (начиная с Linux 
                     2.6). До ядра 2.6 это поле было жестко закодировано 
                     как 0 в качестве заполнителя для ранее удаленного поля.

              (21) itrealvalue  %ld
                     Время в jiffies до отправки следующего сигнала SIGALRM
                     процессу из-за интервального таймера. Начиная с
                     ядра 2.6.17, это поле больше не поддерживается
                     и жестко закодировано как 0.

              (22) starttime  %llu
                     Время запуска процесса после загрузки системы. В
                     ядрах до Linux 2.6 это значение выражалось
                     в jiffies. Начиная с Linux 2.6, значение
                     выражается в тактах (разделить на
                     sysconf(_SC_CLK_TCK)).

                     Формат для этого поля был %lu до Linux 2.6.

              (23) vsize  %lu
                     Размер виртуальной памяти в байтах.

              (24) rss  %ld
                     Размер резидентного набора: количество страниц, которые процесс имеет
                     в реальной памяти. Это только те страницы, которые учитываются
                     для текста, данных или пространства стека. Это не
                     включает страницы, которые не были загружены по требованию,
                     или которые выгружены в своп. Это значение
                     неточное; см. /proc/[pid]/statm ниже.

              (25) rsslim  %lu
                     Текущее мягкое ограничение в байтах на rss
                     процесса; см. описание RLIMIT_RSS в
                     getrlimit(2).

              (26) startcode  %lu  [PT]
                     Адрес, выше которого может выполняться программный код.

              (27) endcode  %lu  [PT]
                     Адрес, ниже которого может выполняться программный код.

              (28) startstack  %lu  [PT]
                     Адрес начала (т.е., нижней части) стека.

              (29) kstkesp  %lu  [PT]
                     Текущее значение ESP (указателя стека), как найдено
                     на странице стека ядра для процесса.

              (30) kstkeip  %lu  [PT]
                     Текущий EIP (указатель инструкции).

              (31) signal  %lu
                     Битовая карта ожидающих сигналов, отображаемая как
                     десятичное число. Устарело, поскольку не
                     предоставляет информацию о сигналах реального времени; вместо этого
                     используйте /proc/[pid]/status.

              (32) blocked  %lu
                     Битовая карта заблокированных сигналов, отображаемая как
                     десятичное число. Устарело, поскольку не
                     предоставляет информацию о сигналах реального времени; вместо этого
                     используйте /proc/[pid]/status.

              (33) sigignore  %lu
                     Битовая карта игнорируемых сигналов, отображаемая как
                     десятичное число. Устарело, поскольку не
                     предоставляет информацию о сигналах реального времени; вместо этого
                     используйте /proc/[pid]/status.

              (34) sigcatch  %lu
                     Битовая карта перехваченных сигналов, отображаемая как 
                     десятичное число. Устарело, поскольку не предоставляет 
                     информации о сигналах реального времени; используйте 
                     вместо этого /proc/[pid]/status.

              (35) wchan  %lu  [PT]
                     Это "канал", в котором ожидает процесс. Это адрес 
                     местоположения в ядре, где процесс находится в спящем
                     режиме. Соответствующее символическое имя можно найти в
                     /proc/[pid]/wchan.

              (36) nswap  %lu
                     Количество страниц, отправленных в своп (не обслуживается).

              (37) cnswap  %lu
                     Накопленное значение nswap для дочерних процессов (не
                     обслуживается).

              (38) exit_signal  %d  (начиная с Linux 2.1.22)
                     Сигнал, который будет отправлен родительскому процессу, когда мы завершимся.

              (39) processor  %d  (начиная с Linux 2.2.8)
                     Номер процессора, на котором последний раз выполнялся процесс.

              (40) rt_priority  %u  (начиная с Linux 2.5.19)
                     Приоритет планирования реального времени, число в 
                     диапазоне от 1 до 99 для процессов, планируемых по политике
                     реального времени, или 0 для процессов не реального времени (см.
                     sched_setscheduler(2)).

              (41) policy  %u  (начиная с Linux 2.5.19)
                     Политика планирования (см. sched_setscheduler(2)).
                     Для декодирования используйте константы SCHED_* в
                     linux/sched.h.

                     Формат этого поля был %lu до Linux
                     2.6.22.

              (42) delayacct_blkio_ticks  %llu  (начиная с Linux 2.6.18)
                     Совокупные задержки блочного ввода/вывода, измеренные в тактах часов
                     (сотых долях секунды).

              (43) guest_time  %lu  (начиная с Linux 2.6.24)
                     Гостевое время процесса (время, проведенное в работе
                     виртуального ЦП для гостевой операционной системы), измеряется
                     в тактах часов (разделите на sysconf(_SC_CLK_TCK)).

              (44) cguest_time  %ld  (начиная с Linux 2.6.24)
                     Гостевое время дочерних процессов, измеренное в
                     тактах часов (разделите на sysconf(_SC_CLK_TCK)).

              (45) start_data  %lu  (начиная с Linux 3.3)  [PT]
                     Адрес, выше которого размещаются инициализированные и
                     неинициализированные данные программы (BSS).

              (46) end_data  %lu  (начиная с Linux 3.3)  [PT]
                     Адрес, ниже которого размещаются инициализированные и
                     неинициализированные данные программы (BSS).

              (47) start_brk  %lu  (начиная с Linux 3.3)  [PT]
                     Адрес, выше которого может быть расширена куча программы
                     с помощью brk(2).

              (48) arg_start  %lu  (начиная с Linux 3.5)  [PT]
                     Адрес, выше которого размещаются аргументы командной строки 
                     программы (argv).

              (49) arg_end  %lu  (начиная с Linux 3.5)  [PT]
                     Адрес, ниже которого размещаются аргументы командной строки 
                     программы (argv).

              (50) env_start  %lu  (начиная с Linux 3.5)  [PT]
                     Адрес, выше которого размещается окружение программы.

              (51) env_end  %lu  (начиная с Linux 3.5)  [PT]
                     Адрес, ниже которого размещается окружение программы.

              (52) exit_code  %d  (начиная с Linux 3.5)  [PT]
                     Код завершения потока в формате, возвращаемом 
                     waitpid(2).

       /proc/[pid]/statm
              Предоставляет информацию об использовании памяти, измеренную в
              страницах. Столбцы содержат:

                  size       (1) общий размер программы
                             (то же, что и VmSize в /proc/[pid]/status)
                  resident   (2) размер резидентного набора
                             (неточно; то же, что и VmRSS в /proc/[pid]/status)
                  shared     (3) количество резидентных разделяемых страниц
                             (т.е., подкрепленных файлом)
                             (неточно; то же, что и RssFile+RssShmem в
                             /proc/[pid]/status)
                  text       (4) текст (код)
                  lib        (5) библиотека (не используется с Linux 2.6; всегда 0)
                  data       (6) данные + стек
                  dt         (7) грязные страницы (не используется с Linux 2.6; всегда 0)

              Некоторые из этих значений неточны из-за оптимизации масштабирования
              внутри ядра. Если требуются точные значения, используйте вместо этого
              /proc/[pid]/smaps или /proc/[pid]/smaps_rollup, которые работают
              гораздо медленнее, но предоставляют точную, подробную информацию.

       /proc/[pid]/status
              Предоставляет большую часть информации из /proc/[pid]/stat и
              /proc/[pid]/statm в формате, который легче анализировать людям.
              Вот пример:

                  $ cat /proc/$$/status
                  Name:   bash
                  Umask:  0022
                  State:  S (спящий)
                  Tgid:   17248
                  Ngid:   0
                  Pid:    17248
                  PPid:   17200
                  TracerPid:      0
                  Uid:    1000    1000    1000    1000
                  Gid:    100     100     100     100
                  FDSize: 256
                  Groups: 16 33 100
                  NStgid: 17248
                  NSpid:  17248
                  NSpgid: 17248
                  NSsid:  17200
                  VmPeak:     131168 кБ
                  VmSize:     131168 кБ
                  VmLck:           0 кБ
                  VmPin:           0 кБ
                  VmHWM:       13484 кБ
                  VmRSS:       13484 кБ
                  RssAnon:     10264 кБ
                  RssFile:      3220 кБ
                  RssShmem:        0 кБ
                  VmData:      10332 кБ
                  VmStk:         136 кБ
                  VmExe:         992 кБ
                  VmLib:        2104 кБ
                  VmPTE:          76 кБ
                  VmPMD:          12 кБ
                  VmSwap:          0 кБ
                  HugetlbPages:          0 кБ        # 4.4
                  CoreDumping:   0                       # 4.15
                  Threads:        1
                  SigQ:   0/3067
                  SigPnd: 0000000000000000
                  ShdPnd: 0000000000000000
                  SigBlk: 0000000000010000

                  SigIgn: 0000000000384004
                  SigCgt: 000000004b813efb
                  CapInh: 0000000000000000
                  CapPrm: 0000000000000000
                  CapEff: 0000000000000000
                  CapBnd: ffffffffffffffff
                  CapAmb:   0000000000000000
                  NoNewPrivs:     0
                  Seccomp:        0
                  Speculation_Store_Bypass:       уязвимый
                  Cpus_allowed:   00000001
                  Cpus_allowed_list:      0
                  Mems_allowed:   1
                  Mems_allowed_list:      0
                  voluntary_ctxt_switches:        150
                  nonvoluntary_ctxt_switches:     545

              Поля следующие:

              Name   Команда, запущенная этим процессом. Строки длиннее 
                     TASK_COMM_LEN (16) символов (включая завершающий 
                     нулевой байт) молча усекаются.

              Umask  Маска umask процесса, выраженная в восьмеричной системе с 
                     ведущим нулем; см. umask(2). (Начиная с Linux 4.7.)

              State  Текущее состояние процесса. Одно из "R 
                     (выполняется)", "S (спит)", "D (диск спит)", "T 
                     (остановлен)", "t (остановка трассировки)", "Z (зомби)" или "X 
                     (мертв)".

              Tgid   Идентификатор группы потоков (т.е. идентификатор процесса).

              Ngid   Идентификатор группы NUMA (0 если нет; начиная с Linux 3.13).

              Pid    Идентификатор потока (см. gettid(2)).

              PPid   PID родительского процесса.

              TracerPid
                     PID процесса, отслеживающего этот процесс (0, если
                     отслеживание не выполняется).

              Uid, Gid
                     Реальные, эффективные, сохраненного набора и
                     файловой системы UID (GID).

              FDSize Количество слотов файловых дескрипторов, в данный
                     момент выделенных.

              Groups Список дополнительных групп.

              NStgid ID группы потоков (т.е., PID) в каждом из
                     пространств имен PID, членом которых является [pid].
                     Крайняя левая запись показывает значение относительно
                     пространства имен PID процесса, который смонтировал
                     этот procfs (или корневого пространства имен, если
                     монтирование выполнено ядром), за которым следует
                     значение в последовательно вложенных внутренних
                     пространствах имен. (Начиная с Linux 4.1.)

              NSpid  ID потока в каждом из пространств имен PID, членом
                     которых является [pid]. Поля упорядочены так же, как
                     для NStgid. (Начиная с Linux 4.1.)

              NSpgid ID группы процессов в каждом из пространств имен PID,
                     членом которых является [pid]. Поля упорядочены так
                     же, как для NStgid. (Начиная с Linux 4.1.)

              NSsid  иерархия ID сессии дочернего пространства имен
                     ID сессии в каждом из пространств имен PID, членом
                     которых является [pid]. Поля упорядочены так же, как
                     для NStgid (Начиная с Linux 4.1.)

              VmPeak Пиковый размер виртуальной памяти.

              VmSize Размер виртуальной памяти.

              VmLck  Размер заблокированной памяти (см. mlock(2)).

              VmPin  Размер прикреплённой памяти (начиная с Linux 3.2).
                     Это страницы, которые не могут быть перемещены,
                     потому что что-то нуждается в прямом доступе к
                     физической памяти.

              VmHWM  Пиковый размер резидентного набора ("верхняя отметка").
                     Это значение неточное; см. /proc/[pid]/statm выше.

              VmRSS  Размер резидентного набора. Обратите внимание, что
                     значение здесь является суммой RssAnon, RssFile и
                     RssShmem. Это значение неточное; см. /proc/[pid]/statm
                     выше.

              RssAnon
                     Размер резидентной анонимной памяти. (начиная с
                     Linux 4.5). Это значение неточное; см.
                     /proc/[pid]/statm выше.

              RssFile
                     Размер резидентных файловых отображений. (начиная
                     с Linux 4.5). Это значение неточное; см.
                     /proc/[pid]/statm выше.

              RssShmem
                     Размер резидентной разделяемой памяти (включает
                     разделяемую память System V, отображения из tmpfs(5)
                     и разделяемые анонимные отображения). (начиная с
                     Linux 4.5).

              VmData, VmStk, VmExe
                     Размер сегментов данных, стека и текста. Это
                     значение неточное; см. /proc/[pid]/statm выше.

              VmLib  Размер кода разделяемых библиотек.

              VmPTE  Размер записей таблицы страниц (начиная с Linux 2.6.10).

              VmPMD  Размер таблиц страниц второго уровня (добавлено в Linux
                     4.0; удалено в Linux 4.15).

              VmSwap Размер выгруженной в своп виртуальной памяти по анонимным
                     приватным страницам; использование своп-памяти для shmem не включено
                     (начиная с Linux 2.6.34). Это значение неточное;
                     см. /proc/[pid]/statm выше.

              HugetlbPages
                     Размер участков памяти hugetlb (начиная с Linux 4.4).

              CoreDumping
                     Содержит значение 1, если процесс в настоящее время
                     выполняет дамп ядра, и 0, если нет (начиная с Linux
                     4.15). Эта информация может быть использована процессом
                     мониторинга, чтобы избежать завершения процесса, который
                     в настоящее время выполняет дамп ядра, что может привести к
                     повреждению файла дампа ядра.

              Threads
                     Количество потоков в процессе, содержащем этот
                     поток.

              SigQ   Это поле содержит два числа, разделенных косой чертой,
                     которые относятся к сигналам в очереди для реального ID пользователя
                     этого процесса. Первое из них - количество
                     сигналов, находящихся в настоящее время в очереди для этого реального ID пользователя,
                     а второе - ограничение ресурсов на количество
                     сигналов в очереди для этого процесса (см.
                     описание RLIMIT_SIGPENDING в getrlimit(2)).

              SigPnd, ShdPnd
                     Маска (выражена в шестнадцатеричном формате) сигналов, 
                     ожидающих для потока и для процесса в целом (см. 
                     pthreads(7) и signal(7)).

              SigBlk, SigIgn, SigCgt
                     Маски (выражены в шестнадцатеричном формате), указывающие 
                     сигналы, которые блокируются, игнорируются и 
                     перехватываются (см. signal(7)).

              CapInh, CapPrm, CapEff
                     Маски (выражены в шестнадцатеричном формате) возможностей, 
                     включенных в наследуемый, разрешенный и эффективный 
                     наборы (см. capabilities(7)).

              CapBnd Ограничивающий набор возможностей, выраженный в 
                     шестнадцатеричном формате (начиная с Linux 2.6.26, 
                     см. capabilities(7)).

              CapAmb Набор окружающих возможностей, выраженный в 
                     шестнадцатеричном формате (начиная с Linux 4.3, 
                     см. capabilities(7)).

              NoNewPrivs
                     Значение бита no_new_privs (начиная с Linux 4.10, 
                     см. prctl(2)).

              Seccomp
                     Режим безопасных вычислений процесса (начиная с Linux 3.8, 
                     см. seccomp(2)). 0 означает SECCOMP_MODE_DISABLED; 1 
                     означает SECCOMP_MODE_STRICT; 2 означает 
                     SECCOMP_MODE_FILTER. Это поле предоставляется только 
                     если ядро было собрано с включенной опцией конфигурации 
                     CONFIG_SECCOMP.

              Speculation_Store_Bypass
                     Состояние смягчения уязвимости спекулятивного исполнения 
                     (начиная с Linux 4.17, см. prctl(2)).

              Cpus_allowed
                     Шестнадцатеричная маска процессоров, на которых
                     этот процесс может выполняться (начиная с Linux 2.6.24,
                     см. cpuset(7)).

              Cpus_allowed_list
                     То же, что и предыдущее, но в "списочном формате"
                     (начиная с Linux 2.6.26, см. cpuset(7)).

              Mems_allowed
                     Маска узлов памяти, доступных этому процессу
                     (начиная с Linux 2.6.24, см. cpuset(7)).

              Mems_allowed_list
                     То же, что и предыдущее, но в "списочном формате"
                     (начиная с Linux 2.6.26, см. cpuset(7)).

              voluntary_ctxt_switches, nonvoluntary_ctxt_switches
                     Количество добровольных и принудительных
                     переключений контекста (начиная с Linux 2.6.23).

       /proc/[pid]/syscall (начиная с Linux 2.6.27)
              Этот файл показывает номер системного вызова и регистры
              аргументов для системного вызова, который в настоящее
              время выполняется процессом, за которыми следуют значения
              регистров указателя стека и счетчика программ. Отображаются
              значения всех шести регистров аргументов, хотя большинство
              системных вызовов используют меньшее количество регистров.

              Если процесс заблокирован, но не в системном вызове, то
              файл отображает -1 вместо номера системного вызова,
              за которым следуют только значения указателя стека и
              счетчика программ. Если процесс не заблокирован, то файл
              содержит только строку "running".

              Этот файл присутствует только если ядро было настроено
              с CONFIG_HAVE_ARCH_TRACEHOOK.

              Разрешение на доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_ATTACH_FSCREDS; см.
              ptrace(2).

       /proc/[pid]/task (начиная с Linux 2.6.0)
              Это директория, которая содержит один подкаталог для
              каждого потока в процессе. Имя каждого подкаталога
              представляет собой числовой идентификатор потока ([tid])
              (см. gettid(2)).

              Внутри каждого из этих подкаталогов существует набор
              файлов с теми же именами и содержимым, как и в
              директориях /proc/[pid]. Для атрибутов, которые являются
              общими для всех потоков, содержимое каждого из файлов
              в подкаталогах task/[tid] будет таким же, как в
              соответствующем файле в родительском каталоге /proc/[pid]
              (например, в многопоточном процессе все файлы
              task/[tid]/cwd будут иметь то же значение, что и
              файл /proc/[pid]/cwd в родительском каталоге, поскольку все
              потоки в процессе используют общую рабочую директорию). Для
              атрибутов, которые индивидуальны для каждого потока,
              соответствующие файлы в task/[tid] могут иметь различные
              значения (например, различные поля в каждом из
              файлов task/[tid]/status могут отличаться для каждого потока),
              или они могут вообще не существовать в /proc/[pid].

              В многопоточном процессе содержимое
              каталога /proc/[pid]/task недоступно, если основной
              поток уже завершил работу (обычно путем вызова
              pthread_exit(3)).

       /proc/[pid]/task/[tid]/children (начиная с Linux 3.5)
              Список задач-потомков этой задачи, разделенных пробелами. Каждая
              дочерняя задача представлена своим TID.

              Эта опция предназначена для использования системой
              checkpoint-restore (CRIU) и надежно предоставляет список дочерних процессов
              только если все дочерние процессы остановлены или заморожены.
              Она не работает должным образом, если дочерние процессы целевой задачи
              завершаются во время чтения файла! Завершающиеся дочерние процессы могут
              привести к тому, что незавершающиеся дочерние процессы будут пропущены в списке.
              Это делает этот интерфейс еще более ненадежным, чем
              классические подходы на основе PID, если проверяемая задача и ее
              дочерние процессы не заморожены, и большинство кода, вероятно, не должно
              использовать этот интерфейс.

              До Linux 4.2 наличие этого файла регулировалось
              опцией конфигурации ядра CONFIG_CHECKPOINT_RESTORE.
              Начиная с Linux 4.2, оно регулируется опцией
              CONFIG_PROC_CHILDREN.

       /proc/[pid]/timers (начиная с Linux 3.10)
              Список таймеров POSIX для этого процесса. Каждый таймер
              перечислен в строке, которая начинается со строки "ID:".
              Например:

                  ID: 1
                  signal: 60/00007fff86e452a8
                  notify: signal/pid.2634
                  ClockID: 0
                  ID: 0
                  signal: 60/00007fff86e452a8
                  notify: signal/pid.2634
                  ClockID: 1

              Строки, показанные для каждого таймера, имеют следующие
              значения:

              ID     Идентификатор этого таймера. Это не то же самое, что
                     идентификатор таймера, возвращаемый timer_create(2); скорее, это
                     тот же внутренний идентификатор ядра, который доступен через
                     поле si_timerid структуры siginfo_t
                     (см. sigaction(2)).

              signal Это номер сигнала, который этот таймер использует для
                     доставки уведомлений, за которым следует косая черта, а затем
                     значение sigev_value, передаваемое обработчику сигнала.
                     Действительно только для таймеров, которые уведомляют через
                     сигнал.

              notify Часть перед косой чертой указывает механизм,
                     который этот таймер использует для доставки уведомлений,
                     и может быть одним из "thread", "signal" или "none".
                     Непосредственно после косой черты следует либо строка
                     "tid" для таймеров с уведомлением SIGEV_THREAD_ID,
                     либо "pid" для таймеров, которые уведомляют другими
                     механизмами. После "." указывается PID процесса
                     (или ID потока ядра), которому будет доставлен сигнал,
                     если таймер доставляет уведомления через сигнал.

              ClockID
                     Это поле идентифицирует часы, которые таймер использует
                     для измерения времени. Для большинства часов это число,
                     соответствующее одной из констант CLOCK_* в пространстве
                     пользователя, определенных в <time.h>.
                     Таймеры CLOCK_PROCESS_CPUTIME_ID отображаются со значением
                     -6 в этом поле. Таймеры CLOCK_THREAD_CPUTIME_ID
                     отображаются со значением -2 в этом поле.

              Этот файл доступен только если ядро было сконфигурировано
              с CONFIG_CHECKPOINT_RESTORE.

       /proc/[pid]/timerslack_ns (начиная с Linux 4.6)
              Этот файл показывает "текущее" значение таймера задержки процесса,
              выраженное в наносекундах. Файл доступен для записи,
              позволяя изменять значение таймера задержки процесса.
              Запись 0 в этот файл сбрасывает "текущий" таймер задержки до
              "стандартного" значения таймера задержки. Для получения дополнительных сведений см.
              обсуждение PR_SET_TIMERSLACK в prctl(2).

              Изначально, доступ к этому файлу регулировался
              проверкой режима доступа ptrace PTRACE_MODE_ATTACH_FSCREDS (см.
              ptrace(2)). Однако впоследствии это требование посчитали слишком
              строгим (и имело побочный эффект, при котором
              требование наличия у процесса возможности CAP_SYS_PTRACE
              также позволяло бы ему просматривать и изменять память любого процесса).
              Поэтому, начиная с Linux 4.9, для доступа к этому файлу
              требуется только (более слабая) возможность CAP_SYS_NICE.

       /proc/[pid]/uid_map (начиная с Linux 3.5)
              См. user_namespaces(7).

       /proc/[pid]/wchan (начиная с Linux 2.6.0)
              Символическое имя, соответствующее месту в
              ядре, где процесс находится в режиме сна.

              Доступ к этому файлу регулируется проверкой
              режима доступа ptrace PTRACE_MODE_READ_FSCREDS; см. ptrace(2).

       /proc/[tid]
              Для каждого выполняющегося потока, который не является лидером
              группы потоков (то есть для потока, идентификатор которого
              не совпадает с идентификатором процесса), существует числовой
              подкаталог, названный по идентификатору потока. Каждый из этих
              подкаталогов содержит файлы и подкаталоги, предоставляющие
              информацию о потоке с идентификатором tid. Содержимое этих
              каталогов совпадает с соответствующими каталогами
              /proc/[pid]/task/[tid].

              Подкаталоги /proc/[tid] не видны при переборе /proc с помощью
              getdents(2) (и, следовательно, не видны при использовании ls(1)
              для просмотра содержимого /proc), но они доступны
              (то есть могут использоваться в качестве аргументов) для системных
              вызовов, работающих с путями.

       /proc/apm
              Информация о версии расширенного управления питанием и батарее,
              когда CONFIG_APM определен во время компиляции ядра.

       /proc/buddyinfo
              Этот файл содержит информацию, используемую для диагностики
              проблем фрагментации памяти. Каждая строка начинается с
              идентификации узла и названия зоны, которые вместе определяют
              область памяти. Затем следует количество доступных блоков
              определенного порядка, на которые разделены эти зоны. Размер
              в байтах определенного порядка задается формулой:

                  (2^order) * PAGE_SIZE

              Алгоритм двоичного сегментирования памяти (binary buddy allocator) внутри ядра
              разделяет один фрагмент на два фрагмента меньшего порядка
              (таким образом, с половиной размера) или объединяет два смежных фрагмента
              в один больший фрагмент более высокого порядка (таким образом, с двойным
              размером) для удовлетворения запросов на выделение памяти и борьбы
              с фрагментацией памяти. Порядок соответствует номеру
              столбца, когда начинаем считать с нуля.

              Например, в системе x86-64:
         Node 0, zone     DMA     1    1    1    0    2    1    1    0    1    1    3
         Node 0, zone   DMA32    65   47    4   81   52   28   13   10    5    1  404
         Node 0, zone  Normal   216   55  189  101   84   38   37   27    5    3  587

              В этом примере есть один узел, содержащий три зоны
              и 11 различных размеров фрагментов. Если размер страницы
              составляет 4 килобайта, то первая зона, называемая DMA (на x86 первые
              16 мегабайт памяти), имеет 1 фрагмент размером 4 килобайта
              (порядок 0) и 3 фрагмента по 4 мегабайта (порядок
              10).

              Если память сильно фрагментирована, счетчики для
              фрагментов высшего порядка будут равны нулю, и выделение больших
              непрерывных областей будет невозможно.

              Дополнительную информацию о зонах можно найти в
              /proc/zoneinfo.

       /proc/bus
              Содержит подкаталоги для установленных шин.

       /proc/bus/pccard
              Подкаталог для устройств PCMCIA, когда CONFIG_PCMCIA установлен
              во время компиляции ядра.

       /proc/bus/pccard/drivers

       /proc/bus/pci
              Содержит различные подкаталоги шин и псевдофайлы,
              содержащие информацию о шинах PCI, установленных
              устройствах и драйверах устройств. Некоторые из этих файлов не
              в ASCII формате.

       /proc/bus/pci/devices
              Информация о устройствах PCI. Доступ к ним может осуществляться
              через lspci(8) и setpci(8).

       /proc/cgroups (начиная с Linux 2.6.24)
              См. cgroups(7).

       /proc/cmdline
              Аргументы, переданные ядру Linux при загрузке.
              Обычно выполняется через загрузчик, такой как lilo(8) или grub(8).

       /proc/config.gz (начиная с Linux 2.6)
              Этот файл показывает параметры конфигурации, которые были использованы
              для сборки текущего запущенного ядра, в том же формате,
              в котором они были бы показаны в файле .config, полученном
              при настройке ядра (с использованием make xconfig, make
              config или аналогичных). Содержимое файла сжато;
              просматривать или искать в нём можно с помощью zcat(1) и zgrep(1). Пока
              не было внесено никаких изменений в следующий файл,
              содержимое /proc/config.gz совпадает с содержимым, предоставляемым:

                  cat /lib/modules/$(uname -r)/build/.config

              /proc/config.gz предоставляется только если ядро
              сконфигурировано с CONFIG_IKCONFIG_PROC.

       /proc/crypto
              Список шифров, предоставляемых API-интерфейсом шифрования ядра.
              Для получения подробной информации см. документацию API 
              шифрования ядра Linux, доступную в каталоге исходного 
              кода ядра Documentation/crypto/ (или Documentation/DocBook 
              до версии 4.10; документацию можно собрать, используя 
              команду make htmldocs в корневом каталоге дерева 
              исходного кода ядра).

       /proc/cpuinfo
              Это набор зависимых от ЦП и системной архитектуры 
              элементов, для каждой поддерживаемой архитектуры 
              список отличается. Два общих элемента — это processor, 
              который указывает номер ЦП, и bogomips — системная 
              константа, которая вычисляется во время инициализации 
              ядра. Машины с SMP имеют информацию для каждого ЦП. 
              Команда lscpu(1) собирает свою информацию из этого файла.

       /proc/devices
              Текстовый список основных номеров и групп устройств. Он 
              может использоваться сценариями MAKEDEV для обеспечения 
              согласованности с ядром.

       /proc/diskstats (начиная с Linux 2.5.69)
              Этот файл содержит статистику ввода-вывода дисков для 
              каждого дискового устройства. См. файл исходного кода 
              ядра Linux Documentation/iostats.txt для получения 
              дополнительной информации.

       /proc/dma
              Это список зарегистрированных используемых каналов 
              ISA DMA (прямого доступа к памяти).

       /proc/driver
              Пустой подкаталог.

       /proc/execdomains
              Список исполняемых доменов (ABI personalities).

       /proc/fb
              Информация о фреймбуфере, когда CONFIG_FB определен во 
              время компиляции ядра.

       /proc/filesystems
              Текстовый список файловых систем, которые поддерживаются 
              ядром, а именно файловые системы, которые были скомпилированы 
              в ядро, или модули которых в настоящее время загружены.
              (См. также filesystems(5).) Если файловая система помечена 
              как "nodev", это означает, что для ее монтирования не требуется 
              блочное устройство (например, виртуальная файловая система, 
              сетевая файловая система).

              Кстати, этот файл может использоваться командой mount(8), когда 
              не указана файловая система, и она не смогла определить 
              тип файловой системы. В этом случае будут опробованы файловые 
              системы, содержащиеся в этом файле (за исключением тех, 
              которые помечены как "nodev").

       /proc/fs
              Содержит подкаталоги, которые, в свою очередь, содержат файлы с 
              информацией о (определенных) смонтированных файловых системах.

       /proc/ide
              Этот каталог существует на системах с шиной IDE. Есть каталоги 
              для каждого канала IDE и подключенного устройства. 
              Файлы включают:

                  cache              размер буфера кэша в КБ
                  capacity           количество секторов
                  driver             версия драйвера
                  geometry           физическая и логическая геометрия
                  identify           в шестнадцатеричном формате
                  media              тип носителя
                  model              номер модели производителя
                  settings           настройки диска
                  smart_thresholds   пороговые значения управления IDE диском (в шестнадцатеричном формате)
                  smart_values       значения управления IDE диском (в шестнадцатеричном формате)

              Утилита hdparm(8) предоставляет доступ к этой информации
              в удобном формате.

       /proc/interrupts
              Используется для записи количества прерываний на каждый CPU
              на каждое устройство ввода-вывода. Начиная с Linux 2.6.24, по крайней мере 
              для архитектур i386 и x86-64, это также включает
              внутренние прерывания системы (то есть не связанные
              с устройством как таковым), такие как NMI (немаскируемое
              прерывание), LOC (прерывание локального таймера), и для SMP
              систем, TLB (прерывание очистки TLB), RES (прерывание
              перепланирования), CAL (прерывание удаленного вызова функции) и
              возможно другие. Очень легко читаемое форматирование, выполненное в
              ASCII.

       /proc/iomem
              Карта памяти ввода-вывода в Linux 2.4.

       /proc/ioports
              Это список зарегистрированных в настоящее время регионов
              портов ввода-вывода, которые используются.

       /proc/kallsyms (начиная с Linux 2.5.71)
              Содержит определения экспортируемых ядром символов, используемых
              инструментами modules(X) для динамической компоновки и привязки загружаемых
              модулей. В Linux 2.5.47 и ранее аналогичный файл с
              немного другим синтаксисом назывался ksyms.

       /proc/kcore
              Этот файл представляет физическую память системы и
              хранится в формате core-файла ELF. С помощью этого псевдо-
              файла и неурезанного бинарного файла ядра (/usr/src/linux/vmlinux),
              можно использовать GDB для исследования текущего состояния
              любых структур данных ядра.

              Общая длина файла равна размеру физической
              памяти (RAM) плюс 4 КиБ.

       /proc/keys (начиная с Linux 2.6.10)
              См. keyrings(7).

       /proc/key-users (начиная с Linux 2.6.10)
              См. keyrings(7).

       /proc/kmsg
              Этот файл можно использовать вместо системного вызова syslog(2)
              для чтения сообщений ядра. Процесс должен иметь привилегии суперпользователя
              для чтения этого файла, и только один процесс должен
              читать этот файл. Этот файл не следует читать, если запущен процесс syslog,
              который использует средства системного вызова syslog(2) для
              регистрации сообщений ядра.

              Информация из этого файла извлекается с помощью программы
              dmesg(1).

       /proc/kpagecgroup (начиная с Linux 4.3)
              Этот файл содержит 64-битный номер inode группы памяти cgroup,
              к которой привязана каждая страница, индексированный по номеру
              фрейма страницы (см. обсуждение /proc/[pid]/pagemap).

              Файл /proc/kpagecgroup присутствует только если включена
              опция конфигурации ядра CONFIG_MEMCG.

       /proc/kpagecount (начиная с Linux 2.6.25)
              Этот файл содержит 64-битный счетчик количества раз,
              когда каждый физический фрейм страницы отображен, индексированный
              по номеру фрейма страницы (см. обсуждение /proc/[pid]/pagemap).

              Файл /proc/kpagecount присутствует только если включена
              опция конфигурации ядра CONFIG_PROC_PAGE_MONITOR.

       /proc/kpageflags (начиная с Linux 2.6.25)
              Этот файл содержит 64-битные маски, соответствующие каждому
              физическому фрейму страницы; он индексирован по номеру фрейма
              страницы (см. обсуждение /proc/[pid]/pagemap). Биты
              следующие:

                   0 - KPF_LOCKED
                   1 - KPF_ERROR
                   2 - KPF_REFERENCED
                   3 - KPF_UPTODATE
                   4 - KPF_DIRTY
                   5 - KPF_LRU
                   6 - KPF_ACTIVE
                   7 - KPF_SLAB
                   8 - KPF_WRITEBACK
                   9 - KPF_RECLAIM
                  10 - KPF_BUDDY
                  11 - KPF_MMAP           (начиная с Linux 2.6.31)
                  12 - KPF_ANON           (начиная с Linux 2.6.31)
                  13 - KPF_SWAPCACHE      (начиная с Linux 2.6.31)
                  14 - KPF_SWAPBACKED     (начиная с Linux 2.6.31)
                  15 - KPF_COMPOUND_HEAD  (начиная с Linux 2.6.31)
                  16 - KPF_COMPOUND_TAIL  (начиная с Linux 2.6.31)
                  17 - KPF_HUGE           (начиная с Linux 2.6.31)
                  18 - KPF_UNEVICTABLE    (начиная с Linux 2.6.31)
                  19 - KPF_HWPOISON       (начиная с Linux 2.6.31)
                  20 - KPF_NOPAGE         (начиная с Linux 2.6.31)
                  21 - KPF_KSM            (начиная с Linux 2.6.32)
                  22 - KPF_THP            (начиная с Linux 3.4)
                  23 - KPF_BALLOON        (начиная с Linux 3.18)
                  24 - KPF_ZERO_PAGE      (начиная с Linux 4.0)
                  25 - KPF_IDLE           (начиная с Linux 4.3)

              Для получения дополнительной информации о значениях этих битов см.
              файл исходного кода ядра
              Documentation/admin-guide/mm/pagemap.rst. До версии ядра
              2.6.29, KPF_WRITEBACK, KPF_RECLAIM, KPF_BUDDY и
              KPF_LOCKED не отображались корректно.

              Файл /proc/kpageflags присутствует только если
              опция конфигурации ядра CONFIG_PROC_PAGE_MONITOR
              включена.

       /proc/ksyms (Linux 1.1.23–2.5.47)
              См. /proc/kallsyms.

       /proc/loadavg
              Первые три поля в этом файле представляют собой показатели средней нагрузки,
              указывающие количество задач в очереди выполнения (состояние
              R) или ожидающих ввода-вывода диска (состояние D), усредненное за 1, 5,
              и 15 минут. Они совпадают с цифрами средней нагрузки,
              предоставляемыми командой uptime(1) и другими программами. Четвертое
              поле состоит из двух чисел, разделенных косой чертой (/).
              Первое из них - количество текущих исполняемых
              сущностей планирования ядра (процессы, потоки).
              Значение после косой черты - это количество сущностей планирования ядра,
              которые в настоящее время существуют в системе. Пятое
              поле - это PID процесса, который был создан
              в системе последним.

       /proc/locks
              Этот файл показывает текущие файловые блокировки (flock(2) и fcntl(2))
              и аренды (fcntl(2)).

              Пример содержимого, отображаемого в этом файле:

                  1: POSIX  ADVISORY  READ  5433 08:01:7864448 128 128
                  2: FLOCK  ADVISORY  WRITE 2001 08:01:7864554 0 EOF
                  3: FLOCK  ADVISORY  WRITE 1568 00:2f:32388 0 EOF
                  4: POSIX  ADVISORY  WRITE 699 00:16:28457 0 EOF
                  5: POSIX  ADVISORY  WRITE 764 00:16:21448 0 0
                  6: POSIX  ADVISORY  READ  3548 08:01:7867240 1 1
                  7: POSIX  ADVISORY  READ  3548 08:01:7865567 1826 2335
                  8: OFDLCK ADVISORY  WRITE -1 08:01:8713209 128 191

              Поля, показанные в каждой строке, следующие:

              (1) Порядковая позиция блокировки в списке.

              (2) Тип блокировки. Значения, которые могут появиться здесь, включают:

                  FLOCK  Это блокировка файлов BSD, созданная с использованием flock(2).

                  OFDLCK Это блокировка дескриптора открытого файла (OFD),
                         созданная с использованием fcntl(2).

                  POSIX  Это байтовая блокировка POSIX, созданная с использованием
                         fcntl(2).

              (3) Среди строк, которые могут появиться здесь, есть
                  следующие:

                  ADVISORY
                         Это рекомендательная блокировка.

                  MANDATORY
                         Это обязательная блокировка.

              (4) Тип блокировки. Значения, которые могут появиться здесь:

                  READ   Это блокировка чтения POSIX или OFD, или
                         BSD-блокировка совместного использования.

                  WRITE  Это блокировка записи POSIX или OFD, или
                         эксклюзивная блокировка BSD.

              (5) PID процесса, которому принадлежит блокировка.

                  Поскольку блокировки OFD не принадлежат отдельному процессу
                  (так как несколько процессов могут иметь файловые дескрипторы,
                  которые ссылаются на одно и то же открытое описание файла),
                  в этом поле для блокировок OFD отображается значение -1.
                  (До ядра 4.14 из-за ошибки вместо значения -1
                  отображался PID процесса, который изначально получил блокировку.)

              (6) Три подполя, разделенные двоеточиями, которые идентифицируют
                  основной и второстепенный идентификаторы устройства, содержащего
                  файловую систему, где находится заблокированный файл,
                  после чего следует номер inode заблокированного файла.

              (7) Байтовое смещение первого байта блокировки.
                  Для блокировок BSD это значение всегда 0.

              (8) Байтовое смещение последнего байта блокировки. EOF в
                  этом поле означает, что блокировка распространяется до конца
                  файла. Для блокировок BSD показанное значение всегда
                  EOF.

              Начиная с Linux 4.9 список блокировок, показанных в /proc/locks,
              фильтруется для отображения только блокировок для процессов в
              пространстве имен PID (см. pid_namespaces(7)), для которого
              была смонтирована файловая система /proc. (В исходном пространстве имен PID
              фильтрация записей, показываемых в этом файле, не производится.)

              Команда lslocks(8) предоставляет немного больше информации
              о каждой блокировке.

       /proc/malloc (только до Linux 2.2 включительно)
              Этот файл присутствует только если CONFIG_DEBUG_MALLOC был
              определен во время компиляции.

       /proc/meminfo
              Этот файл сообщает статистику об использовании памяти в
              системе. Он используется free(1) для отображения количества
              свободной и используемой памяти (как физической, так и своп)
              в системе, а также совместно используемой памяти и буферов,
              используемых ядром. Каждая строка файла состоит из имени параметра,
              за которым следует двоеточие, значение параметра и
              необязательная единица измерения (например, "кБ"). Список
              ниже описывает имена параметров и спецификатор формата,
              необходимый для чтения значения поля. За исключением случаев,
              указанных ниже, все поля присутствуют как минимум
              с версии Linux 2.6.0. Некоторые поля отображаются только если
              ядро было сконфигурировано с различными опциями; эти
              зависимости отмечены в списке.

              MemTotal %lu
                     Общая доступная RAM (т.е. физическая RAM минус несколько
                     зарезервированных битов и бинарный код ядра).

              MemFree %lu
                     Сумма LowFree+HighFree.

              MemAvailable %lu (начиная с Linux 3.14)
                     Оценка того, сколько памяти доступно для
                     запуска новых приложений без использования свопа.

              Buffers %lu
                     Относительно временное хранилище для необработанных 
                     дисковых блоков, которое не должно становиться слишком 
                     большим (примерно 20 МБ).

              Cached %lu
                     Кеш в памяти для файлов, считанных с диска (кеш страниц).
                     Не включает SwapCached.

              SwapCached %lu
                     Память, которая когда-то была выгружена в своп, 
                     возвращена обратно в оперативную память, но также 
                     все еще находится в файле подкачки. (Если нагрузка 
                     на память высока, эти страницы не нужно снова выгружать 
                     в своп, поскольку они уже есть в файле подкачки. 
                     Это экономит операции ввода-вывода.)

              Active %lu
                     Память, которая использовалась недавно и обычно
                     не освобождается, если это не абсолютно необходимо.

              Inactive %lu
                     Память, которая использовалась менее недавно. Она
                     более подходит для освобождения в других целях.

              Active(anon) %lu (с Linux 2.6.28)
                     [Будет документировано.]

              Inactive(anon) %lu (с Linux 2.6.28)
                     [Будет документировано.]

              Active(file) %lu (с Linux 2.6.28)
                     [Будет документировано.]

              Inactive(file) %lu (с Linux 2.6.28)
                     [Будет документировано.]

              Unevictable %lu (начиная с Linux 2.6.28)
                     (С Linux 2.6.28 до 2.6.30,
                     требовался CONFIG_UNEVICTABLE_LRU.)  [Будет
                     документировано.]

              Mlocked %lu (начиная с Linux 2.6.28)
                     (С Linux 2.6.28 до 2.6.30,
                     требовался CONFIG_UNEVICTABLE_LRU.)  [Будет
                     документировано.]

              HighTotal %lu
                     (Начиная с Linux 2.6.19, требуется
                     CONFIG_HIGHMEM.)  Общее количество highmem. Highmem - это
                     вся память выше ~860 МБ физической памяти.
                     Области highmem используются для программ пространства пользователя
                     или для кэша страниц. Ядру необходимо использовать трюки
                     для доступа к этой памяти, что делает её доступ
                     медленнее, чем к lowmem.

              HighFree %lu
                     (Начиная с Linux 2.6.19, требуется
                     CONFIG_HIGHMEM.)  Количество свободной памяти highmem.

              LowTotal %lu
                     (Начиная с Linux 2.6.19, требуется
                     CONFIG_HIGHMEM.)  Общее количество памяти lowmem. Lowmem - это
                     память, которая может использоваться для всего, для чего
                     может использоваться highmem, но она также доступна
                     для использования ядром для своих собственных структур данных.
                     Среди многих других вещей, это то место, где всё
                     из Slab выделяется. Плохие вещи происходят, когда
                     у вас заканчивается lowmem.

              LowFree %lu
                     (Начиная с Linux 2.6.19, требуется CONFIG_HIGHMEM.)
                     Количество свободной нижней памяти.

              MmapCopy %lu (с Linux 2.6.29)
                     (Требуется CONFIG_MMU.)  [Будет документировано.]

              SwapTotal %lu
                     Общий объем доступного пространства подкачки.

              SwapFree %lu
                     Объем пространства подкачки, который в настоящее время не используется.

              Dirty %lu
                     Память, которая ожидает записи обратно на диск.

              Writeback %lu
                     Память, которая активно записывается обратно на диск.

              AnonPages %lu (с Linux 2.6.18)
                     Страницы, не основанные на файлах, отображенные в таблицы страниц
                     пользовательского пространства.

              Mapped %lu
                     Файлы, которые были отображены в память (с помощью
                     mmap(2)), такие как библиотеки.

              Shmem %lu (с Linux 2.6.32)
                     Объем памяти, потребляемой в файловых системах tmpfs(5).

              KReclaimable %lu (с Linux 4.20)
                     Выделения ядра, которые ядро попытается вернуть
                     при нехватке памяти. Включает SReclaimable (ниже)
                     и другие прямые выделения с шринкером.

              Slab %lu
                     Кэш структур данных в ядре. (См. slabinfo(5).)

              SReclaimable %lu (начиная с Linux 2.6.19)
                     Часть Slab, которая может быть восстановлена, например,
                     кэши.

              SUnreclaim %lu (начиная с Linux 2.6.19)
                     Часть Slab, которая не может быть восстановлена при
                     нехватке памяти.

              KernelStack %lu (начиная с Linux 2.6.32)
                     Объем памяти, выделенной для стеков ядра.

              PageTables %lu (начиная с Linux 2.6.18)
                     Объем памяти, выделенной для низшего уровня
                     таблиц страниц.

              Quicklists %lu (начиная с Linux 2.6.27)
                     (Требуется CONFIG_QUICKLIST.) [Еще 
                     документируется.]

              NFS_Unstable %lu (начиная с Linux 2.6.18)
                     Страницы NFS, отправленные на сервер, но еще не зафиксированные
                     в стабильном хранилище.

              Bounce %lu (начиная с Linux 2.6.18)
                     Память, используемая для "буферов отскока" блочных устройств.

              WritebackTmp %lu (начиная с Linux 2.6.26)
                     Память, используемая FUSE для временных буферов
                     обратной записи.

              CommitLimit %lu (начиная с Linux 2.6.10)
                     Это общий объем памяти, которую в настоящее время
                     можно выделить в системе, выраженный
                     в килобайтах. Этот лимит соблюдается только если
                     включен строгий учет перевыделения (режим 2 в
                     /proc/sys/vm/overcommit_memory). Лимит
                     рассчитывается по формуле, описанной в
                     /proc/sys/vm/overcommit_memory. Для дополнительной
                     информации см. исходный файл ядра
                     Documentation/vm/overcommit-accounting.rst.

              Committed_AS %lu
                     Объем памяти, в настоящее время выделенной в
                     системе. Выделенная память – это сумма всей памяти,
                     которая была выделена процессами,
                     даже если она не была "использована" ими до сих пор.
                     Процесс, который выделяет 1 ГБ памяти (используя
                     malloc(3) или аналогичные функции), но обращается только к 300 МБ
                     этой памяти, будет отображаться как использующий только 300 МБ
                     памяти, даже если у него выделено адресное пространство
                     для всего 1 ГБ.

                     Этот 1 ГБ — это память, которая была "зарезервирована"
                     виртуальной машиной и может быть использована в любое время
                     программой, которая её выделила. При включенном строгом
                     переопределении на системе (режим 2 в
                     /proc/sys/vm/overcommit_memory), выделения, которые
                     превышают CommitLimit, не будут разрешены.
                     Это полезно, если нужно гарантировать, что
                     процессы не будут завершаться из-за нехватки памяти после
                     того, как память была успешно выделена.

              VmallocTotal %lu
                     Общий размер области памяти vmalloc.

              VmallocUsed %lu
                     Количество используемой области vmalloc. Начиная с Linux
                     4.4, это поле больше не рассчитывается и
                     жестко закодировано как 0. См. /proc/vmallocinfo.

              VmallocChunk %lu
                     Наибольший непрерывный блок свободной области vmalloc.
                     Начиная с Linux 4.4, это поле больше не
                     рассчитывается и жестко закодировано как 0. См.
                     /proc/vmallocinfo.

              HardwareCorrupted %lu (начиная с Linux 2.6.32)
                     (требуется CONFIG_MEMORY_FAILURE.) [Будет
                     документировано.]

              LazyFree %lu (начиная с Linux 4.12)
                     Показывает количество памяти, помеченной madvise(2)
                     MADV_FREE.

              AnonHugePages %lu (начиная с Linux 2.6.38)
                     (Требуется CONFIG_TRANSPARENT_HUGEPAGE.)  Огромные
                     страницы, не основанные на файлах, отображенные в
                     таблицы страниц пользовательского пространства.

              ShmemHugePages %lu (начиная с Linux 4.8)
                     (Требуется CONFIG_TRANSPARENT_HUGEPAGE.)  Память,
                     используемая разделяемой памятью (shmem) и tmpfs(5),
                     выделенная с огромными страницами.

              ShmemPmdMapped %lu (начиная с Linux 4.8)
                     (Требуется CONFIG_TRANSPARENT_HUGEPAGE.)  Разделяемая
                     память, отображенная в пользовательское пространство
                     с огромными страницами.

              CmaTotal %lu (начиная с Linux 3.1)
                     Общее количество страниц CMA (Contiguous Memory Allocator).
                     (Требуется CONFIG_CMA.)

              CmaFree %lu (начиная с Linux 3.1)
                     Свободные страницы CMA (Contiguous Memory Allocator).
                     (Требуется CONFIG_CMA.)

              HugePages_Total %lu
                     (Требуется CONFIG_HUGETLB_PAGE.)  Размер пула
                     огромных страниц.

              HugePages_Free %lu
                     (Требуется CONFIG_HUGETLB_PAGE.)  Количество
                     огромных страниц в пуле, которые еще не выделены.

              HugePages_Rsvd %lu (начиная с Linux 2.6.17)
                     (требуется CONFIG_HUGETLB_PAGE). Это количество
                     огромных страниц, для которых было сделано
                     обязательство выделить из пула, но выделение
                     еще не произведено. Эти зарезервированные огромные
                     страницы гарантируют, что приложение сможет
                     выделить огромную страницу из пула огромных страниц
                     в момент возникновения ошибки страницы.

              HugePages_Surp %lu (начиная с Linux 2.6.24)
                     (требуется CONFIG_HUGETLB_PAGE). Это количество
                     огромных страниц в пуле сверх значения,
                     указанного в /proc/sys/vm/nr_hugepages. Максимальное
                     количество избыточных огромных страниц контролируется
                     параметром /proc/sys/vm/nr_overcommit_hugepages.

              Hugepagesize %lu
                     (требуется CONFIG_HUGETLB_PAGE). Размер
                     огромных страниц.

              DirectMap4k %lu (начиная с Linux 2.6.27)
                     Количество байт ОЗУ, линейно отображаемых ядром в
                     страницах размером 4 КБ. (x86.)

              DirectMap4M %lu (начиная с Linux 2.6.27)
                     Количество байт ОЗУ, линейно отображаемых ядром в
                     страницах размером 4 МБ. (x86 с включенным CONFIG_X86_64 или
                     CONFIG_X86_PAE.)

              DirectMap2M %lu (начиная с Linux 2.6.27)
                     Количество байт оперативной памяти, линейно отображаемой ядром в
                     страницах по 2 MB. (x86 без включенных CONFIG_X86_64 и
                     CONFIG_X86_PAE.)

              DirectMap1G %lu (начиная с Linux 2.6.27)
                     (x86 с включенными CONFIG_X86_64 и
                     CONFIG_X86_DIRECT_GBPAGES.)

       /proc/modules
              Текстовый список модулей, загруженных
              системой. Смотрите также lsmod(8).

       /proc/mounts
              До ядра версии 2.4.19 этот файл содержал список всех
              файловых систем, смонтированных в данный момент в системе. С
              введением пространств имен монтирования для каждого процесса в Linux
              2.4.19 (см. mount_namespaces(7)), этот файл стал ссылкой
              на /proc/self/mounts, который перечисляет точки монтирования в собственном
              пространстве имен монтирования процесса. Формат этого файла
              документирован в fstab(5).

       /proc/mtrr
              Регистры диапазонов типов памяти (Memory Type Range Registers). Подробности смотрите в исходном
              файле ядра Linux Documentation/x86/mtrr.txt (или Documentation/mtrr.txt
              до Linux 2.6.28).

       /proc/net
              Этот каталог содержит различные файлы и подкаталоги
              с информацией о сетевом уровне. Файлы
              содержат структуры в ASCII и, следовательно,
              читаемы с помощью cat(1). Однако, стандартный набор утилит netstat(8)
              предоставляет гораздо более удобный доступ к этим файлам.

              С появлением пространств имён сети различная информация,
              относящаяся к сетевому стеку, виртуализирована (см.
              network_namespaces(7)). Таким образом, начиная с Linux 2.6.25,
              /proc/net является символической ссылкой на директорию
              /proc/self/net, которая содержит те же файлы и
              директории, что перечислены ниже. Однако эти файлы и
              директории теперь отображают информацию для пространства имён сети,
              членом которого является процесс.

       /proc/net/arp
              Содержит читаемый в ASCII дамп таблицы ARP ядра,
              используемой для разрешения адресов. Она отображает как
              динамически изученные, так и заранее запрограммированные ARP-записи.
              Формат следующий:

                  IP address     HW type   Flags     HW address          Mask   Device
                  192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
                  192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0

              Здесь "IP address" - это IPv4-адрес машины, а
              "HW type" - это тип оборудования адреса согласно
              RFC 826. Флаги - это внутренние флаги структуры ARP
              (как определено в /usr/include/linux/if_arp.h), а
              "HW address" - это отображение канального уровня для этого
              IP-адреса, если оно известно.

       /proc/net/dev
              Псевдо-файл dev содержит информацию о состоянии сетевых устройств.
              В нем указано количество полученных и отправленных пакетов,
              количество ошибок и коллизий, а также другие базовые статистические данные.
              Эта информация используется программой ifconfig(8) для отчета о состоянии устройства.
              Формат следующий:

              Inter-|   Receive                                                |  Transmit
               face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
                  lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
                eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
                ppp0: 1622270    5552    1    0    0    0          0         0   354130    5669    0    0    0     0       0          0
                tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0

       /proc/net/dev_mcast
              Определено в /usr/src/linux/net/core/dev_mcast.c:

                  indx interface_name  dmi_u dmi_g dmi_address
                  2    eth0            1     0     01005e000001
                  3    eth1            1     0     01005e000001
                  4    eth2            1     0     01005e000001

       /proc/net/igmp
              Internet Group Management Protocol. Определен в
              /usr/src/linux/net/core/igmp.c.

       /proc/net/rarp
              Этот файл использует тот же формат, что и файл arp, и
              содержит текущую базу данных обратного отображения, используемую для
              предоставления услуг обратного поиска адресов rarp(8). Если RARP
              не сконфигурирован в ядре, этот файл не будет
              присутствовать.

       /proc/net/raw
              Содержит дамп таблицы сокетов RAW. Большая часть
              информации не представляет пользы, кроме отладки. Значение "sl"
              это хеш-слот ядра для сокета, "local_address"
              это пара локального адреса и номера протокола. "St" - внутренний статус сокета.
              "tx_queue" и "rx_queue" - это исходящая и входящая
              очереди данных с точки зрения использования памяти ядра. Поля "tr",
              "tm->when" и "rexmits" не используются для RAW.
              Поле "uid" содержит эффективный UID создателя
              сокета.

       /proc/net/snmp
              Этот файл содержит ASCII-данные, необходимые для баз управляющей информации
              IP, ICMP, TCP и UDP для агента SNMP.

       /proc/net/tcp
              Содержит дамп таблицы TCP сокетов. Большая часть 
              информации полезна только для отладки. Значение "sl" 
              представляет собой хеш-слот ядра для сокета, 
              "local_address" - пара локального адреса и номера порта. 
              "rem_address" - пара удаленного адреса и номера порта 
              (если подключен). "St" - внутренний статус сокета. 
              "tx_queue" и "rx_queue" - исходящая и входящая очереди 
              данных в терминах использования памяти ядра. 
              Поля "tr", "tm->when" и "rexmits" содержат внутреннюю 
              информацию о состоянии сокета ядра и полезны только для 
              отладки. Поле "uid" содержит эффективный UID создателя 
              сокета.

       /proc/net/udp
              Содержит дамп таблицы UDP-сокетов. Большая часть информации
              полезна только для отладки. Значение "sl" — это хеш-слот
              ядра для сокета, "local_address" — пара локального адреса
              и номера порта. "rem_address" — пара удаленного адреса и
              номера порта (если подключен). "St" — внутренний статус
              сокета. "tx_queue" и "rx_queue" — исходящая и входящая
              очереди данных в терминах использования памяти ядра.
              Поля "tr", "tm->when" и "rexmits" не используются UDP.
              Поле "uid" содержит эффективный UID создателя сокета.
              Формат следующий:

              sl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm->when uid
               1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
               1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
               1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0

       /proc/net/unix
              Перечисляет сокеты домена UNIX, присутствующие в системе,
              и их статус. Формат следующий:

              Num RefCount Protocol Flags    Type St Inode Path
               0: 00000002 00000000 00000000 0001 03    42
               1: 00000001 00000000 00010000 0001 01  1948 /dev/printer

              Поля следующие:

              Num:   номер слота в таблице ядра.

              RefCount:
                     количество пользователей сокета.

              Protocol:
                     в настоящее время всегда 0.

              Flags: внутренние флаги ядра, отображающие статус 
                     сокета.

              Type:  тип сокета. Для сокетов SOCK_STREAM это 
                     0001; для сокетов SOCK_DGRAM - 0002; для 
                     сокетов SOCK_SEQPACKET - 0005.

              St:    внутреннее состояние сокета.

              Inode: номер индексного дескриптора сокета.

              Path:  привязанный путь (если есть) сокета. Сокеты
                     в абстрактном пространстве имен включены в список
                     и отображаются с путем, который начинается с
                     символа '@'.

       /proc/net/netfilter/nfnetlink_queue
              Этот файл содержит информацию о пользовательских очередях
              netfilter, если они используются. Каждая строка представляет очередь.
              Очереди, на которые не подписано пользовательское пространство,
              не отображаются.

                     1   4207     0  2 65535     0     0        0  1
                    (1)   (2)    (3)(4)  (5)    (6)   (7)      (8)

              Поля в каждой строке:

              (1)  ID очереди. Соответствует тому, что указано
                   в опциях --queue-num или --queue-balance для
                   цели NFQUEUE в iptables(8). Смотрите
                   iptables-extensions(8) для получения дополнительной информации.

              (2)  ID порта netlink, подписанного на очередь.

              (3)  Количество пакетов, в настоящее время стоящих в очереди и ожидающих 
                   обработки приложением.

              (4)  Режим копирования очереди. Он может быть либо 1 (только метаданные), 
                   либо 2 (также копирует данные полезной нагрузки в пользовательское 
                   пространство).

              (5)  Диапазон копирования; то есть, сколько байтов полезной нагрузки 
                   пакета должно быть скопировано в пользовательское пространство 
                   максимум.

              (6)  Отброшенные очередью. Количество пакетов, которые должны были быть 
                   отброшены ядром, потому что слишком много пакетов уже ожидают от 
                   пользовательского пространства обязательных вердиктов принять/отбросить.

              (7)  Отброшенные пользователем очереди. Количество пакетов, которые были 
                   отброшены в подсистеме netlink. Такие отбрасывания обычно происходят, 
                   когда соответствующий буфер сокета заполнен; то есть, пользовательское 
                   пространство не в состоянии читать сообщения достаточно быстро.

              (8)  Порядковый номер. Каждому поставленному в очередь пакету присваивается 
                   монотонно возрастающий (32-битный) порядковый номер. Это показывает ID 
                   самого последнего пакета, поставленного в очередь.

              Последнее число существует только для совместимости и всегда равно 1.

       /proc/partitions
              Содержит основные и второстепенные номера каждого раздела, а также 
              количество 1024-байтных блоков и название раздела.

       /proc/pci
              Это список всех устройств PCI, найденных во время
              инициализации ядра, и их конфигурация.

              Этот файл устарел в пользу нового интерфейса /proc
              для PCI (/proc/bus/pci). Он стал необязательным в
              Linux 2.2 (доступен с CONFIG_PCI_OLD_PROC, установленным
              при компиляции ядра). Он снова стал неопционально
              включенным в Linux 2.4. Затем он был объявлен устаревшим в Linux
              2.6 (всё ещё доступен с CONFIG_PCI_LEGACY_PROC), и
              наконец полностью удален начиная с Linux 2.6.17.

       /proc/profile (начиная с Linux 2.4)
              Этот файл присутствует только если ядро было загружено с
              опцией командной строки profile=1. Он предоставляет информацию
              профилирования ядра в бинарном формате для использования
              readprofile(1). Запись (например, пустой строки) в этот
              файл сбрасывает счетчики профилирования; на некоторых архитектурах,
              запись бинарного целочисленного "множителя профилирования" размером
              sizeof(int) устанавливает частоту прерываний профилирования.

       /proc/scsi
              Директория с псевдо-файлом среднего уровня scsi и
              различными директориями низкоуровневых драйверов SCSI, которые содержат
              файл для каждого хоста SCSI в этой системе, все из которых дают
              статус некоторой части подсистемы ввода-вывода SCSI. Эти
              файлы содержат ASCII структуры и поэтому
              читаемы с помощью cat(1).

              Вы также можете записывать в некоторые файлы для изменения конфигурации
              подсистемы или включения/выключения определенных функций.

       /proc/scsi/scsi
              Это список всех SCSI-устройств, известных ядру.
              Список похож на тот, который виден при загрузке.
              scsi в настоящее время поддерживает только команду add-single-device,
              которая позволяет администратору (root) добавлять подключаемые устройства
              к списку известных устройств.

              Команда

                  echo 'scsi add-single-device 1 0 5 0' > /proc/scsi/scsi

              заставит хост scsi1 просканировать SCSI-канал 0 для
              устройства с ID 5 LUN 0. Если на этом адресе уже есть известное
              устройство или адрес недействителен, будет возвращена ошибка.

       /proc/scsi/[drivername]
              [drivername] в настоящее время может быть NCR53c7xx, aha152x, aha1542,
              aha1740, aic7xxx, buslogic, eata_dma, eata_pio, fdomain,
              in2000, pas16, qlogic, scsi_debug, seagate, t128, u15-24f,
              ultrastore или wd7000. Эти каталоги появляются для всех
              драйверов, которые зарегистрировали хотя бы один SCSI HBA.
              Каждый каталог содержит один файл для каждого зарегистрированного хоста.
              Каждый файл хоста назван по номеру, который был присвоен хосту
              во время инициализации.

              Чтение этих файлов обычно показывает конфигурацию драйвера и хоста,
              статистику и так далее.

              Запись в эти файлы позволяет выполнять различные действия на
              разных хостах. Например, с помощью команд latency и
              nolatency, root может включать и выключать код измерения
              задержки команд в драйвере eata_dma. С помощью
              команд lockup и unlock, root может управлять блокировками шины,
              симулируемыми драйвером scsi_debug.

       /proc/self
              Этот каталог ссылается на процесс, обращающийся к файловой системе /proc,
              и идентичен каталогу /proc, именованному идентификатором процесса
              того же самого процесса.

       /proc/slabinfo
              Информация о кешах ядра. См. slabinfo(5) для
              подробностей.

       /proc/stat
              Статистика ядра/системы. Варьируется в зависимости от архитектуры.
              Общие записи включают:

              cpu 10132153 290696 3084719 46828483 16683 0 25195 0
              175628 0
              cpu0 1393280 32966 572056 13343292 6130 0 17875 0 23933 0
                     Количество времени, измеренное в единицах USER_HZ
                     (1/100-х секунды на большинстве архитектур, используйте
                     sysconf(_SC_CLK_TCK) для получения правильного значения),
                     которое система (строка "cpu") или конкретный CPU
                     (строка "cpuN") провела в различных состояниях:

                     user   (1) Время, проведенное в пользовательском режиме.

                     nice   (2) Время, проведенное в пользовательском режиме с низким
                            приоритетом (nice).

                     system (3) Время, проведенное в системном режиме.

                     idle   (4) Время, проведенное в задаче простоя.  Это значение
                            должно быть USER_HZ, умноженное на второе значение в
                            псевдо-файле /proc/uptime.

                     iowait (начиная с Linux 2.5.41)
                            (5) Время ожидания завершения ввода/вывода.  Это
                            значение ненадежно по следующим
                            причинам:

                            1. ЦП не будет ждать завершения ввода/вывода;
                               iowait - это время, в течение которого задача
                               ожидает завершения ввода/вывода. Когда
                               ЦП переходит в состояние простоя для ожидающего
                               задачного ввода/вывода, другая задача будет запланирована
                               на этом ЦП.

                            2. На многоядерном ЦП задача, ожидающая
                               завершения ввода/вывода, не работает ни на одном
                               ЦП, поэтому iowait каждого ЦП
                               трудно вычислить.

                            3. Значение в этом поле может уменьшаться при
                               определенных условиях.

                     irq (начиная с Linux 2.6.0)
                            (6) Время обслуживания прерываний.

                     softirq (начиная с Linux 2.6.0)
                            (7) Время обслуживания программных прерываний.

                     steal (since Linux 2.6.11)
                            (8) Украденное время, которое является временем, проведенным в
                            других операционных системах при работе в
                            виртуализированной среде

                     guest (since Linux 2.6.24)
                            (9) Время, затраченное на работу виртуального ЦП для
                            гостевых операционных систем под управлением
                            ядра Linux.

                     guest_nice (since Linux 2.6.33)
                            (10) Время, затраченное на выполнение гостевой системы с nice
                            (виртуального ЦП для гостевых операционных систем
                            под управлением ядра Linux).

              page 5741 1808
                     Количество страниц, которые система подкачала из диска и
                     количество, которое было выгружено (на диск).

              swap 1 0
                     Количество страниц подкачки, которые были загружены
                     и выгружены.

              intr 1462898
                     Эта строка показывает количество обработанных прерываний с момента
                     загрузки системы для каждого из возможных системных
                     прерываний. Первый столбец - это сумма всех
                     обработанных прерываний, включая ненумерованные
                     архитектурно-зависимые прерывания; каждый последующий
                     столбец - это общее количество для конкретного пронумерованного
                     прерывания. Ненумерованные прерывания не показаны,
                     только суммированы в общем.

              disk_io: (2,0):(31,30,5764,1,2) (3,0):...
                     (major,disk_idx):(noinfo, read_io_ops, blks_read,
                     write_io_ops, blks_written)
                     (Только для Linux 2.4)

              ctxt 115315
                     Количество переключений контекста, выполненных
                     системой.

              btime 769041601
                     Время загрузки в секундах с начала эпохи, 1970-01-01
                     00:00:00 +0000 (UTC).

              processes 86031
                     Количество разветвлений процессов с момента загрузки.

              procs_running 6
                     Количество процессов в состоянии готовности к выполнению.
                     (Linux 2.5.45 и выше.)

              procs_blocked 2
                     Количество процессов, заблокированных в ожидании завершения
                     операций ввода-вывода. (Linux 2.5.45 и выше.)

              softirq 229245889 94 60001584 13619 5175704 2471304 28
              51212741 59130143 0 51240672
                     Эта строка показывает количество программных прерываний (softirq) для всех ЦП.
                     Первый столбец - это общее количество всех softirq, а каждый последующий
                     столбец - общее количество для конкретного softirq. (Linux 2.6.31 и выше.)

       /proc/swaps
              Используемые области подкачки. См. также swapon(8).

       /proc/sys
              Этот каталог (появившийся с версии 1.3.57) содержит ряд
              файлов и подкаталогов, соответствующих переменным ядра.
              Эти переменные можно читать и в некоторых случаях
              изменять с помощью файловой системы /proc и (устаревшего)
              системного вызова sysctl(2).

              Строковые значения могут завершаться либо '\0', либо '\n'.

              Целочисленные и длинные значения можно записывать как в
              десятичной, так и в шестнадцатеричной нотации (например, 0x3FFF).
              При записи нескольких целочисленных или длинных значений
              они могут разделяться любым из следующих пробельных символов:
              ' ', '\t', или '\n'. Использование других разделителей
              приводит к ошибке EINVAL.

       /proc/sys/abi (начиная с Linux 2.4.10)
              Этот каталог может содержать файлы с информацией о двоичном
              формате приложений. Дополнительную информацию см. в файле
              исходного кода ядра Linux Documentation/sysctl/abi.txt.

       /proc/sys/debug
              Этот каталог может быть пустым.

       /proc/sys/dev
              Этот каталог содержит информацию о конкретных устройствах
              (например, dev/cdrom/info). На некоторых системах он
              может быть пустым.

       /proc/sys/fs
              Этот каталог содержит файлы и подкаталоги для
              переменных ядра, связанных с файловыми системами.

       /proc/sys/fs/aio-max-nr и /proc/sys/fs/aio-nr (начиная с Linux
       2.6.4)
              aio-nr - это текущее общее количество событий,
              указанных вызовами io_setup(2) для всех активных
              контекстов AIO в данный момент. Если aio-nr достигает aio-max-nr, то
              io_setup(2) завершится с ошибкой EAGAIN. Увеличение
              aio-max-nr не приводит к предварительному выделению или
              изменению размера каких-либо структур данных ядра.

       /proc/sys/fs/binfmt_misc
              Документацию для файлов в этом каталоге можно найти в
              исходном коде ядра Linux в файле
              Documentation/admin-guide/binfmt-misc.rst (или в
              Documentation/binfmt_misc.txt в более старых ядрах).

       /proc/sys/fs/dentry-state (начиная с Linux 2.2)
              Этот файл содержит информацию о состоянии кэша
              каталогов (dcache). Файл содержит шесть чисел,
              nr_dentry, nr_unused, age_limit (возраст в секундах),
              want_pages (страницы, запрошенные системой) и два фиктивных
              значения.

              * nr_dentry - это количество выделенных dentry (записей dcache).
                Это поле не используется в Linux 2.2.

              * nr_unused - это количество неиспользуемых dentry.

              * age_limit - это возраст в секундах, после которого записи dcache
                могут быть освобождены при нехватке памяти.

              * want_pages не равно нулю, когда ядро вызвало
                shrink_dcache_pages(), а dcache еще не очищен.

       /proc/sys/fs/dir-notify-enable
              Этот файл может быть использован для отключения или включения
              интерфейса dnotify, описанного в fcntl(2), на общесистемном уровне.
              Значение 0 в этом файле отключает интерфейс, а значение 1
              включает его.

       /proc/sys/fs/dquot-max
              Этот файл показывает максимальное количество кэшированных записей
              дисковых квот. На некоторых (2.4) системах он отсутствует. Если
              количество свободных кэшированных записей дисковых квот очень низкое,
              и у вас большое количество одновременных пользователей системы,
              вы можете захотеть увеличить лимит.

       /proc/sys/fs/dquot-nr
              Этот файл показывает количество выделенных записей дисковых квот
              и количество свободных записей дисковых квот.

       /proc/sys/fs/epoll (начиная с Linux 2.6.28)
              Эта директория содержит файл max_user_watches, который
              можно использовать для ограничения объема памяти ядра, потребляемой
              интерфейсом epoll. Для дополнительной информации, смотрите
              epoll(7).

       /proc/sys/fs/file-max
              Этот файл определяет общесистемный лимит на количество
              открытых файлов для всех процессов. Системные вызовы, которые завершаются неудачей при
              достижении этого лимита, выдают ошибку ENFILE. (См.
              также setrlimit(2), который может использоваться процессом для установки
              ограничения на уровне процесса, RLIMIT_NOFILE, на количество
              файлов, которые он может открыть.) Если вы получаете множество сообщений об ошибках в
              журнале ядра о нехватке файловых дескрипторов (открытых
              файловых описаний) (ищите "VFS: file-max limit <number>
              reached"), попробуйте увеличить это значение:

                  echo 100000 > /proc/sys/fs/file-max

              Привилегированные процессы (CAP_SYS_ADMIN) могут обойти
              лимит file-max.

       /proc/sys/fs/file-nr
              Этот (только для чтения) файл содержит три числа: количество
              выделенных файловых дескрипторов (т.е., количество открытых
              файловых описаний; см. open(2)); количество свободных файловых
              дескрипторов; и максимальное количество файловых дескрипторов (т.е.,
              то же значение, что и /proc/sys/fs/file-max). Если количество
              выделенных файловых дескрипторов близко к максимуму, вам следует
              рассмотреть возможность увеличения максимума. До Linux 2.6, ядро
              динамически выделяло файловые дескрипторы, но не освобождало их.
              Вместо этого свободные файловые дескрипторы хранились
              в списке для повторного выделения; значение "свободные файловые дескрипторы"
              указывает на размер этого списка. Большое количество свободных
              файловых дескрипторов указывает на то, что был пик в
              использовании открытых файловых дескрипторов. Начиная с Linux 2.6, ядро
              освобождает файловые дескрипторы, и значение "свободные файловые
              дескрипторы" всегда равно нулю.

       /proc/sys/fs/inode-max (присутствует только до Linux 2.2)
              Этот файл содержит максимальное количество хранящихся в памяти инодов.
              Это значение должно быть в 3–4 раза больше, чем значение в
              file-max, так как stdin, stdout и сетевые сокеты также
              требуют инод для их обработки. Когда вы регулярно исчерпываете иноды,
              вам нужно увеличить это значение.

              Начиная с Linux 2.4, больше нет статического ограничения 
              на количество инодов, и этот файл удален.

       /proc/sys/fs/inode-nr
              Этот файл содержит первые два значения из inode-state.

       /proc/sys/fs/inode-state
              Этот файл содержит семь чисел: nr_inodes,
              nr_free_inodes, preshrink и четыре фиктивных значения (всегда
              ноль).

              nr_inodes - это количество инодов, которые система
              выделила. nr_free_inodes представляет количество свободных
              инодов.

              preshrink не равен нулю, когда nr_inodes > inode-max и
              системе необходимо сократить список инодов вместо
              выделения дополнительных; начиная с Linux 2.4, это поле является
              фиктивным значением (всегда ноль).

       /proc/sys/fs/inotify (начиная с Linux 2.6.13)
              Этот каталог содержит файлы max_queued_events,
              max_user_instances и max_user_watches, которые можно использовать
              для ограничения объема памяти ядра, потребляемой
              интерфейсом inotify. Для получения дополнительной информации см. inotify(7).

       /proc/sys/fs/lease-break-time
              Этот файл определяет период отсрочки, который ядро
              предоставляет процессу, владеющему файловой арендой (fcntl(2)), после
              отправки сигнала этому процессу с уведомлением о том, что
              другой процесс ожидает открытия файла. Если держатель
              аренды не удалит или не понизит уровень аренды в течение этого
              периода отсрочки, ядро принудительно разрывает аренду.

       /proc/sys/fs/leases-enable
              Этот файл может использоваться для включения или отключения файловых аренд
              (fcntl(2)) в масштабе всей системы. Если этот файл содержит
              значение 0, аренды отключены. Ненулевое значение включает
              аренды.

       /proc/sys/fs/mount-max (начиная с Linux 4.9)
              Значение в этом файле определяет максимальное количество
              монтирований, которые могут существовать в пространстве имен монтирования. Значение по
              умолчанию в этом файле равно 100,000.

       /proc/sys/fs/mqueue (начиная с Linux 2.6.6)
              Этот каталог содержит файлы msg_max, msgsize_max и
              queues_max, контролирующие ресурсы, используемые POSIX
              очередями сообщений. См. mq_overview(7) для подробностей.

       /proc/sys/fs/nr_open (начиная с Linux 2.6.25)
              Этот файл устанавливает верхний предел для значения, до которого
              может быть увеличено ограничение ресурса RLIMIT_NOFILE (см.
              getrlimit(2)). Этот предел действует как для
              непривилегированных, так и для привилегированных процессов. Значение по умолчанию в
              этом файле - 1048576. (До Linux 2.6.25 предел для
              RLIMIT_NOFILE был жестко закодирован с тем же значением.)

       /proc/sys/fs/overflowgid и /proc/sys/fs/overflowuid
              Эти файлы позволяют изменить значение фиксированного UID
              и GID. Значение по умолчанию - 65534. Некоторые файловые системы поддерживают
              только 16-битные UID и GID, хотя в Linux UID и GID
              имеют 32 бита. Когда одна из этих файловых систем монтируется
              с разрешением на запись, любой UID или GID, который превышает
              65535, переводится в переполняющее значение перед записью
              на диск.

       /proc/sys/fs/pipe-max-size (начиная с Linux 2.6.35)
              См. pipe(7).

       /proc/sys/fs/pipe-user-pages-hard (начиная с Linux 4.5)
              См. pipe(7).

       /proc/sys/fs/pipe-user-pages-soft (начиная с Linux 4.5)
              См. pipe(7).

       /proc/sys/fs/protected_fifos (начиная с Linux 4.19)
              Значение в этом файле может быть установлено на одно из
              следующих:

              0   Запись в FIFO не ограничена.

              1   Не разрешайте O_CREAT open(2) для FIFO, которыми не
                  владеет вызывающий, в каталогах с битом sticky и
                  правами на запись для всех, если только FIFO не
                  принадлежит владельцу каталога.

              2   Как для значения 1, но ограничение также
                  применяется к каталогам с битом sticky и правами
                  на запись для группы.

              Цель вышеуказанных защит - избежать непреднамеренной
              записи в FIFO, контролируемый атакующим, когда программа
              ожидала создать обычный файл.

       /proc/sys/fs/protected_hardlinks (начиная с Linux 3.6)
              Когда значение в этом файле равно 0, на создание жестких
              ссылок не накладывается никаких ограничений (т.е. это
              историческое поведение до Linux 3.6). Когда значение в
              этом файле равно 1, жесткая ссылка может быть создана на
              целевой файл только в одном из следующих случаев:

              *  Вызывающий процесс имеет возможность CAP_FOWNER в
                 своем пространстве имен пользователя, и UID файла
                 имеет отображение в пространстве имен.

              *  Файловый UID процесса, создающего ссылку, соответствует
                 владельцу (UID) целевого файла (как описано в
                 credentials(7), файловый UID процесса обычно совпадает
                 с его эффективным UID).

              *  Все следующие условия истинны:

                  •  цель является обычным файлом;

                  •  целевой файл не имеет установленного бита режима 
                     set-user-ID;

                  •  целевой файл не имеет одновременно установленных
                     битов режима set-group-ID и group-executable; и

                  •  вызывающий имеет разрешение на чтение и запись
                     целевого файла (через маску разрешений файла
                     или потому что имеет соответствующие возможности).

              Значение по умолчанию в этом файле — 0. Установка значения на
              1 предотвращает давний класс проблем безопасности, вызванных
              гонками типа "проверка времени, использование времени" на основе жестких ссылок,
              наиболее часто встречающихся в каталогах с правами записи для всех, таких как /tmp.
              Распространенный метод использования этой уязвимости заключается в пересечении
              границ привилегий при следовании по данной жесткой ссылке
              (т.е., процесс root следует по жесткой ссылке, созданной
              другим пользователем). Кроме того, в системах без разделенных
              разделов, это предотвращает "закрепление" неавторизованными пользователями
              уязвимых файлов set-user-ID и set-group-ID, чтобы
              администратор не мог их обновить, или создание ссылок на специальные
              файлы.

       /proc/sys/fs/protected_regular (начиная с Linux 4.19)
              Значение в этом файле может быть установлено на одно из
              следующих:

              0   Запись в обычные файлы не ограничена.

              1   Не разрешать open(2) с флагом O_CREAT для обычных файлов,
                  которыми не владеет вызывающий процесс, в доступных на запись
                  для всех каталогах с установленным "липким битом", если
                  только владельцем обычного файла не является владелец
                  каталога.

              2   То же, что и значение 1, но ограничение также применяется
                  к каталогам с "липким битом", доступным для записи группе.

              Цель вышеуказанных защит аналогична protected_fifos, но
              позволяет приложению избежать записи в обычный файл,
              контролируемый злоумышленником, когда приложение ожидало
              создать новый файл.

       /proc/sys/fs/protected_symlinks (начиная с Linux 3.6)
              Когда значение в этом файле равно 0, никаких ограничений
              на следование по символическим ссылкам не накладывается
              (т.е. это историческое поведение до Linux 3.6). Когда значение
              в этом файле равно 1, символические ссылки обрабатываются только
              в следующих обстоятельствах:

              *  UID файловой системы процесса, следующего по ссылке,
                 совпадает с владельцем (UID) символической ссылки (как
                 описано в credentials(7), UID файловой системы процесса
                 обычно совпадает с его эффективным UID);

              *  ссылка не находится в доступном для записи для всех каталоге
                 с "липким битом"; или

              *  символическая ссылка и её родительский каталог имеют
                 одинакового владельца (UID)

              Системный вызов, которому не удается перейти по символической ссылке из-за
              вышеуказанных ограничений, возвращает ошибку EACCES в
              errno.

              Значение по умолчанию в этом файле равно 0. Установка значения в
              1 позволяет избежать давно существующего класса проблем безопасности, основанных на
              гонках между проверкой и использованием при доступе к символическим
              ссылкам.

       /proc/sys/fs/suid_dumpable (начиная с Linux 2.6.13)
              Значение в этом файле присваивается флагу процесса
              "dumpable" при обстоятельствах, описанных в
              prctl(2). По сути, значение в этом файле определяет,
              создаются ли файлы дампа ядра для set-user-ID или
              иных защищенных/искаженных бинарных файлов. Настройка "dumpable"
              также влияет на владение файлами в директории
              /proc/[pid] процесса, как описано выше.

              Можно указать три различных целочисленных значения:

              0 (по умолчанию)
                     Это обеспечивает традиционное (до Linux 2.6.13)
                     поведение. Дамп ядра не будет создан для
                     процесса, который изменил учетные данные (вызвав
                     seteuid(2), setgid(2) или аналогичные, или выполнив
                     set-user-ID или set-group-ID программу) или чей
                     бинарный файл не имеет разрешения на чтение.

              1 ("debug")
                     Все процессы при возможности создают дамп памяти. (Причины,
                     по которым процесс, тем не менее, может не создать дамп
                     памяти, описаны в core(5).) Дамп памяти принадлежит
                     пользователю файловой системы с ID сбрасывающего процесса, и
                     никакая безопасность не применяется. Это предназначено только
                     для ситуаций отладки системы: этот режим небезопасен, так как
                     позволяет непривилегированным пользователям изучать содержимое
                     памяти привилегированных процессов.

              2 ("suidsafe")
                     Любой бинарный файл, который обычно не сбрасывается (см.
                     "0" выше), сбрасывается в виде дампа, читаемого только 
                     root-пользователем. Это позволяет пользователю удалить файл
                     дампа памяти, но не читать его. По соображениям безопасности,
                     дампы памяти в этом режиме не будут перезаписывать друг друга
                     или другие файлы. Этот режим подходит, когда администраторы
                     пытаются отлаживать проблемы в нормальной среде.

                     Кроме того, начиная с Linux 3.6,
                     /proc/sys/kernel/core_pattern должен быть либо абсолютным
                     путем, либо командой конвейера, как подробно описано в
                     core(5). Предупреждения будут записаны в журнал ядра,
                     если core_pattern не соответствует этим правилам,
                     и дамп памяти не будет создан.

              Подробности о влиянии настройки "dumpable" процесса 
              на проверку режима доступа ptrace см. в ptrace(2).

       /proc/sys/fs/super-max
              Этот файл контролирует максимальное количество суперблоков, и 
              таким образом, максимальное количество смонтированных файловых систем, которое 
              может иметь ядро. Вам нужно увеличить только super-max, если вам необходимо 
              смонтировать больше файловых систем, чем позволяет текущее значение в super-max.

       /proc/sys/fs/super-nr
              Этот файл содержит количество файловых систем, смонтированных
              в настоящее время.

       /proc/sys/kernel
              Этот каталог содержит файлы, контролирующие ряд
              параметров ядра, как описано ниже.

       /proc/sys/kernel/acct
              Этот файл содержит три числа: highwater, lowwater и
              frequency. Если BSD-стиль учета процессов включен,
              эти значения контролируют его поведение. Если свободное место на
              файловой системе, где хранится журнал, опускается ниже lowwater
              процентов, учет приостанавливается. Если свободное место поднимается выше
              highwater процентов, учет возобновляется. frequency
              определяет, как часто ядро проверяет количество свободного
              пространства (значение указывается в секундах). Значения по умолчанию: 4, 2 и
              30. То есть, приостановить учет, если 2% или менее пространства
              свободно; возобновить его, если 4% или более пространства свободно; считать
              информацию о количестве свободного пространства действительной в течение 30
              секунд.

       /proc/sys/kernel/auto_msgmni (Linux 2.6.27 to 3.18)
              С Linux 2.6.27 по 3.18 этот файл использовался для управления
              пересчетом значения в /proc/sys/kernel/msgmni при
              добавлении или удалении памяти или при создании/удалении
              пространства имен IPC. Запись "1" в этот файл включала
              автоматический пересчет msgmni (и запускала
              пересчет msgmni на основе текущего количества
              доступной памяти и количества пространств имен IPC). Запись
              "0" отключала автоматический пересчет. (Автоматический
              пересчет также отключался, если значение явно
              присваивалось /proc/sys/kernel/msgmni.) Значение по умолчанию
              в auto_msgmni было 1.

              Начиная с Linux 3.19, содержимое этого файла не имеет эффекта
              (поскольку msgmni по умолчанию близко к максимально возможному значению),
              и чтение из этого файла всегда возвращает
              значение "0".

       /proc/sys/kernel/cap_last_cap (начиная с Linux 3.2)
              См. capabilities(7).

       /proc/sys/kernel/cap-bound (с Linux 2.2 до 2.6.24)
              Этот файл содержит значение ограничивающего набора возможностей ядра
              (выраженное в виде десятичного числа со знаком). Этот
              набор объединяется операцией И с возможностями, разрешенными
              процессу во время execve(2). Начиная с Linux 2.6.25,
              общесистемный ограничивающий набор возможностей исчез и был
              заменен ограничивающим набором для каждого потока; см.
              capabilities(7).

       /proc/sys/kernel/core_pattern
              См. core(5).

       /proc/sys/kernel/core_pipe_limit
              См. core(5).

       /proc/sys/kernel/core_uses_pid
              См. core(5).

       /proc/sys/kernel/ctrl-alt-del
              Этот файл управляет обработкой Ctrl-Alt-Del с клавиатуры.
              Когда значение в этом файле равно 0, Ctrl-Alt-Del
              перехватывается и отправляется программе init(1) для обработки
              корректного перезапуска. Когда значение больше нуля,
              реакция Linux на "Вулканское нервное сжатие" (tm) будет
              немедленной перезагрузкой, даже без синхронизации грязных буферов.
              Примечание: когда программа (например, dosemu) переводит клавиатуру
              в "сырой" режим, сочетание ctrl-alt-del перехватывается программой
              до того, как оно достигнет уровня tty ядра, и программа
              сама решает, что с ним делать.

       /proc/sys/kernel/dmesg_restrict (начиная с Linux 2.6.37)
              Значение в этом файле определяет, кто может видеть содержимое
              системного журнала ядра. Значение 0 в этом файле не накладывает
              никаких ограничений. Если значение равно 1, только привилегированные
              пользователи могут читать системный журнал ядра. (Подробнее
              см. syslog(2).) Начиная с Linux 3.4, только пользователи с
              возможностью CAP_SYS_ADMIN могут изменять значение в этом файле.

       /proc/sys/kernel/domainname и /proc/sys/kernel/hostname
              могут быть использованы для установки доменного имени NIS/YP и имени хоста
              вашей системы точно таким же образом, как команды
              domainname(1) и hostname(1), то есть:

                  # echo 'darkstar' > /proc/sys/kernel/hostname
                  # echo 'mydomain' > /proc/sys/kernel/domainname

              имеет тот же эффект, что и

                  # hostname 'darkstar'
                  # domainname 'mydomain'

              Обратите внимание, однако, что классический darkstar.frop.org имеет
              имя хоста "darkstar" и доменное имя DNS (Internet Domain Name Server)
              "frop.org", которое не следует путать с доменным именем
              NIS (Network Information Service) или YP (Yellow Pages).
              Эти два доменных имени в общем случае
              различны. Подробное обсуждение см. в справочной странице
              hostname(1).

       /proc/sys/kernel/hotplug
              Этот файл содержит путь к агенту политики hotplug.
              Значение по умолчанию в этом файле - /sbin/hotplug.

       /proc/sys/kernel/htab-reclaim (до Linux 2.4.9.2)
              (только для PowerPC) Если этот файл установлен в ненулевое значение,
              таблица htab PowerPC (см. файл ядра
              Documentation/powerpc/ppc_htab.txt) очищается каждый раз,
              когда система попадает в цикл простоя.

       /proc/sys/kernel/keys/*
              Этот каталог содержит различные файлы, которые определяют
              параметры и ограничения для средства управления ключами.
              Эти файлы описаны в keyrings(7).

       /proc/sys/kernel/kptr_restrict (начиная с Linux 2.6.38)
              Значение в этом файле определяет, раскрываются ли адреса ядра
              через файлы /proc и другие интерфейсы. Значение
              0 в этом файле не накладывает никаких ограничений. Если значение
              равно 1, указатели ядра, выводимые с использованием спецификатора
              формата %pK, будут заменены нулями, если у пользователя нет
              возможности CAP_SYSLOG. Если значение равно 2, указатели ядра,
              выводимые с использованием спецификатора формата %pK, будут
              заменены нулями независимо от возможностей пользователя.
              Исходное значение по умолчанию для этого файла было 1, но
              значение по умолчанию было изменено на 0 в Linux 2.6.39. Начиная с Linux
              3.4, только пользователи с возможностью CAP_SYS_ADMIN могут
              изменять значение в этом файле.

       /proc/sys/kernel/l2cr
              (только для PowerPC) Этот файл содержит флаг, который управляет
              кэшем L2 процессорных плат G3. Если 0, кэш
              отключен. Включен, если ненулевое значение.

       /proc/sys/kernel/modprobe
              Этот файл содержит путь к загрузчику модулей ядра.
              Значение по умолчанию - /sbin/modprobe. Файл
              присутствует только если ядро собрано с включенной
              опцией CONFIG_MODULES (CONFIG_KMOD в Linux 2.6.26 и ранее).
              Он описан в файле исходного кода ядра Linux 
              Documentation/kmod.txt (присутствует только в ядре
              версии 2.4 и ранее).

       /proc/sys/kernel/modules_disabled (начиная с Linux 2.6.31)
              Переключаемое значение, указывающее, разрешена ли загрузка 
              модулей в модульном ядре. Этот переключатель
              по умолчанию выключен (0), но может быть установлен в истину (1).
              Как только установлен в истину, модули не могут быть ни загружены,
              ни выгружены, а переключатель не может быть установлен обратно в ложь.
              Файл присутствует только если ядро собрано с включенной
              опцией CONFIG_MODULES.

       /proc/sys/kernel/msgmax (начиная с Linux 2.2)
              Этот файл определяет общесистемное ограничение, задающее
              максимальное количество байт в одном сообщении, записанном в
              очередь сообщений System V.

       /proc/sys/kernel/msgmni (начиная с Linux 2.4)
              Этот файл определяет общесистемное ограничение на количество
              идентификаторов очередей сообщений. Смотрите также
              /proc/sys/kernel/auto_msgmni.

       /proc/sys/kernel/msgmnb (начиная с Linux 2.2)
              Этот файл определяет общесистемный параметр, используемый для
              инициализации настройки msg_qbytes для впоследствии созданных
              очередей сообщений. Настройка msg_qbytes указывает
              максимальное количество байтов, которое может быть записано в очередь
              сообщений.

       /proc/sys/kernel/ngroups_max (начиная с Linux 2.6.4)
              Это файл только для чтения, который отображает верхний предел
              количества групп, в которых может состоять процесс.

       /proc/sys/kernel/ns_last_pid (начиная с Linux 3.3)
              См. pid_namespaces(7).

       /proc/sys/kernel/ostype и /proc/sys/kernel/osrelease
              Эти файлы предоставляют подстроки /proc/version.

       /proc/sys/kernel/overflowgid и /proc/sys/kernel/overflowuid
              Эти файлы дублируют файлы /proc/sys/fs/overflowgid
              и /proc/sys/fs/overflowuid.

       /proc/sys/kernel/panic
              Этот файл предоставляет доступ на чтение/запись к переменной ядра
              panic_timeout. Если значение равно нулю, ядро зациклится при
              панике; если не равно нулю, оно указывает, что ядро должно
              автоматически перезагрузиться после указанного количества секунд. При использовании
              программного драйвера сторожевого устройства рекомендуемое значение
              составляет 60.

       /proc/sys/kernel/panic_on_oops (начиная с Linux 2.5.68)
              Этот файл управляет поведением ядра при возникновении oops или
              BUG. Если этот файл содержит 0, то система пытается
              продолжить работу. Если он содержит 1, то система
              ожидает несколько секунд (чтобы дать klogd время записать
              вывод oops), а затем паникует. Если файл
              /proc/sys/kernel/panic также ненулевой, то машина
              будет перезагружена.

       /proc/sys/kernel/pid_max (начиная с Linux 2.5.34)
              Этот файл указывает значение, при котором PIDs закольцовываются
              (т.е., значение в этом файле на единицу больше, чем
              максимальный PID). PIDs больше этого значения не
              выделяются; таким образом, значение в этом файле также действует как
              общесистемное ограничение на общее количество процессов и
              потоков. Значение по умолчанию для этого файла, 32768, приводит
              к такому же диапазону PIDs, как и в более ранних ядрах.
              На 32-битных платформах 32768 - это максимальное значение для pid_max.
              На 64-битных системах pid_max может быть установлен на любое значение до
              2^22 (PID_MAX_LIMIT, приблизительно 4 миллиона).

       /proc/sys/kernel/powersave-nap (только для PowerPC)
              Этот файл содержит флаг. Если установлен, Linux-PPC будет использовать
              режим энергосбережения "nap", в противном случае будет использоваться
              режим "doze".

       /proc/sys/kernel/printk
              См. syslog(2).

       /proc/sys/kernel/pty (начиная с Linux 2.6.4)
              Этот каталог содержит два файла, относящихся к количеству
              псевдотерминалов UNIX 98 (см. pts(4)) в системе.

       /proc/sys/kernel/pty/max
              Этот файл определяет максимальное количество псевдотерминалов.

       /proc/sys/kernel/pty/nr
              Этот файл только для чтения показывает, сколько псевдотерминалов
              в настоящее время используется.

       /proc/sys/kernel/random
              Этот каталог содержит различные параметры, контролирующие
              работу файла /dev/random. См. random(4) для
              дополнительной информации.

       /proc/sys/kernel/random/uuid (начиная с Linux 2.4)
              Каждое чтение из этого файла только для чтения возвращает случайно
              сгенерированный 128-битный UUID в виде строки в стандартном формате UUID.

       /proc/sys/kernel/randomize_va_space (начиная с Linux 2.6.12)
              Выбирает политику рандомизации адресного пространства (ASLR)
              для системы (на архитектурах, поддерживающих
              ASLR). Для этого файла поддерживаются три значения:

              0  Отключить ASLR. Это значение по умолчанию для архитектур,
                 которые не поддерживают ASLR, и когда ядро загружается
                 с параметром norandmaps.

              1  Сделать адреса выделений mmap(2), стек и страницу VDSO
                 рандомизированными. Среди прочего, это означает, что
                 общие библиотеки будут загружаться по случайным адресам.
                 Текстовый сегмент исполняемых файлов, скомпилированных с PIE,
                 также будет загружаться по случайному адресу.
                 Это значение используется по умолчанию, если ядро было
                 сконфигурировано с CONFIG_COMPAT_BRK.

              2  (Начиная с Linux 2.6.25) Также поддерживает рандомизацию кучи.
                 Это значение используется по умолчанию, если ядро не было
                 сконфигурировано с CONFIG_COMPAT_BRK.

       /proc/sys/kernel/real-root-dev
              Этот файл документирован в исходном файле ядра Linux
              Documentation/admin-guide/initrd.rst (или
              Documentation/initrd.txt до Linux 4.10).

       /proc/sys/kernel/reboot-cmd (только для Sparc)
              Этот файл, по-видимому, является способом передачи аргумента
              загрузчику ROM/Flash для SPARC. Возможно, чтобы указать ему,
              что делать после перезагрузки?

       /proc/sys/kernel/rtsig-max
              (Только в ядрах до 2.6.7 включительно; см.
              setrlimit(2)) Этот файл может быть использован для настройки
              максимального количества сигналов POSIX реального времени
              (в очереди), которые могут быть ожидающими в системе.

       /proc/sys/kernel/rtsig-nr
              (Только в ядрах до 2.6.7 включительно.) Этот файл
              показывает количество сигналов POSIX реального времени,
              находящихся в очереди в данный момент.

       /proc/[pid]/sched_autogroup_enabled (начиная с Linux 2.6.38)
              См. sched(7).

       /proc/sys/kernel/sched_child_runs_first (начиная с Linux 2.6.23)
              Если этот файл содержит значение ноль, то после
              fork(2) родитель первым запускается на CPU. Если
              файл содержит ненулевое значение, то дочерний процесс
              запускается первым на CPU. (Конечно, на многопроцессорной
              системе родительский и дочерний процессы могут оба
              немедленно быть запущены на CPU.)

       /proc/sys/kernel/sched_rr_timeslice_ms (начиная с Linux 3.9)
              См. sched_rr_get_interval(2).

       /proc/sys/kernel/sched_rt_period_us (начиная с Linux 2.6.25)
              См. sched(7).

       /proc/sys/kernel/sched_rt_runtime_us (начиная с Linux 2.6.25)
              См. sched(7).

       /proc/sys/kernel/seccomp (начиная с Linux 4.14)
              Эта директория предоставляет дополнительную информацию
              и конфигурацию seccomp. См. seccomp(2) для более
              подробной информации.

       /proc/sys/kernel/sem (начиная с Linux 2.4)
              Этот файл содержит 4 числа, определяющих ограничения
              для семафоров System V IPC. Эти поля, по порядку:

              SEMMSL  Максимальное количество семафоров на набор семафоров.

              SEMMNS  Общесистемный лимит на количество семафоров во
                      всех наборах семафоров.

              SEMOPM  Максимальное количество операций, которые могут
                      быть указаны в вызове semop(2).

              SEMMNI  Общесистемный предел на максимальное количество
                      идентификаторов семафоров.

       /proc/sys/kernel/sg-big-buff
              Этот файл показывает размер буфера универсального SCSI-устройства (sg).
              Вы пока не можете настроить его, но вы можете изменить
              его при компиляции, отредактировав include/scsi/sg.h и
              изменив значение SG_BIG_BUFF. Однако, не должно быть
              причин для изменения этого значения.

       /proc/sys/kernel/shm_rmid_forced (начиная с Linux 3.1)
              Если в этом файле установлено значение 1, все сегменты
              разделяемой памяти System V будут помечены для уничтожения,
              как только количество присоединенных процессов упадет до нуля;
              другими словами, больше невозможно создавать сегменты разделяемой
              памяти, которые существуют независимо от любого присоединенного процесса.

              Эффект такой же, как если бы shmctl(2) IPC_RMID выполнялся
              для всех существующих сегментов, а также для всех сегментов,
              созданных в будущем (пока этот файл не будет сброшен в 0).
              Обратите внимание, что существующие сегменты, к которым не
              присоединен ни один процесс, будут немедленно уничтожены,
              когда этому файлу присвоено значение 1. Установка
              этой опции также уничтожит сегменты, которые были созданы,
              но никогда не присоединялись, при завершении процесса,
              который создал сегмент с помощью shmget(2).

              Установка значения 1 в этом файле обеспечивает способ гарантировать, что все
              сегменты разделяемой памяти System V учитываются в использовании ресурсов
              и лимитах ресурсов (см. описание RLIMIT_AS в getrlimit(2)) хотя бы одного процесса.

              Поскольку установка значения 1 в этом файле приводит к нестандартному поведению
              и может нарушить работу существующих приложений,
              значение по умолчанию в этом файле равно 0. Устанавливайте в этом файле значение 1
              только если вы хорошо понимаете семантику приложений, использующих разделяемую память
              System V в вашей системе.

       /proc/sys/kernel/shmall (начиная с Linux 2.2)
              Этот файл содержит общесистемное ограничение на общее
              количество страниц разделяемой памяти System V.

       /proc/sys/kernel/shmmax (начиная с Linux 2.2)
              Этот файл может использоваться для запроса и установки ограничения времени выполнения
              на максимальный размер сегмента разделяемой памяти (System V IPC),
              который может быть создан. Сегменты разделяемой памяти размером до 1 ГБ
              сейчас поддерживаются в ядре. Это значение по умолчанию равно
              SHMMAX.

       /proc/sys/kernel/shmmni (начиная с Linux 2.4)
              Этот файл определяет максимальное количество сегментов
              разделяемой памяти System V, которые могут быть созданы в системе.
       /proc/sys/kernel/sysctl_writes_strict (начиная с Linux 3.16)
              Значение в этом файле определяет, как смещение файла
              влияет на поведение при обновлении записей в файлах
              в /proc/sys. Файл может содержать три возможных значения:

              -1  Обеспечивает устаревший режим обработки, без предупреждений
                  printk. Каждый вызов write(2) должен полностью содержать
                  записываемое значение, и множественные записи по одному
                  файловому дескриптору перезапишут всё значение, независимо
                  от позиции в файле.

              0   (по умолчанию) Обеспечивает такое же поведение, как и для -1,
                  но выводит предупреждения printk для процессов, которые
                  выполняют запись, когда смещение файла не равно 0.

              1   Учитывает смещение файла при записи строк в файлы
                  /proc/sys. Множественные записи будут дописываться к
                  буферу значений. Всё, что записывается за пределами
                  максимальной длины буфера значений, будет игнорироваться.
                  Записи в числовые элементы /proc/sys должны всегда выполняться
                  при смещении файла 0, и значение должно полностью содержаться
                  в буфере, предоставленном для write(2).

       /proc/sys/kernel/sysrq
              Этот файл управляет функциями, которые могут быть вызваны
              клавишей SysRq. По умолчанию файл содержит 1, что означает,
              что разрешены все возможные запросы SysRq (в старых
              версиях ядра SysRq был отключен по умолчанию, и вам
              требовалось специально включить его во время работы, но
              сейчас это уже не так). Возможные значения в этом
              файле:

              0    Полностью отключить sysrq

              1    Включить все функции sysrq

              > 1  Битовая маска разрешенных функций sysrq, а именно:
                     2  Включить управление уровнем журналирования консоли
                     4  Включить управление клавиатурой (SAK, unraw)
                     8  Включить отладочные дампы процессов и т.д.
                    16  Включить команду sync
                    32  Включить перемонтирование в режим только для чтения
                    64  Включить отправку сигналов процессам (term, kill, oom-
                        kill)
                   128  Разрешить перезагрузку/выключение
                   256  Разрешить изменение приоритета всех процессов реального времени

              Этот файл присутствует только если включена опция конфигурации
              ядра CONFIG_MAGIC_SYSRQ. Для получения дополнительной информации см.
              файл исходного кода ядра Linux
              Documentation/admin-guide/sysrq.rst (или
              Documentation/sysrq.txt до Linux 4.10).

       /proc/sys/kernel/version
              Этот файл содержит строку, например:

                  #5 Wed Feb 25 21:49:24 MET 1998

              "#5" указывает на то, что это пятое ядро, собранное из
              этой исходной базы, а дата после него указывает на
              время, когда ядро было собрано.
       /proc/sys/kernel/threads-max (начиная с Linux 2.3.11)
              Этот файл определяет общесистемное ограничение на количество
              потоков (задач), которые можно создать в системе.

              Начиная с Linux 4.1, значение, которое можно записать в
              threads-max, ограничено. Минимальное значение, которое можно
              записать, равно 20. Максимальное значение, которое можно записать,
              задается константой FUTEX_TID_MASK (0x3fffffff). Если
              значение за пределами этого диапазона записывается в threads-max,
              возникает ошибка EINVAL.

              Записанное значение проверяется на соответствие доступным страницам ОЗУ.
              Если структуры потоков занимают слишком много
              (более 1/8) доступных страниц ОЗУ, threads-max
              соответствующим образом уменьшается.

       /proc/sys/kernel/yama/ptrace_scope (начиная с Linux 3.5)
              См. ptrace(2).

       /proc/sys/kernel/zero-paged (только для PowerPC)
              Этот файл содержит флаг. При активации (ненулевое значение), Linux-
              PPC будет предварительно обнулять страницы в цикле ожидания, возможно
              ускоряя get_free_pages.

       /proc/sys/net
              Этот каталог содержит сетевые элементы. Объяснения
              для некоторых файлов в этом каталоге можно найти в
              tcp(7) и ip(7).

       /proc/sys/net/core/bpf_jit_enable
              См. bpf(2).

       /proc/sys/net/core/somaxconn
              Этот файл определяет предельное значение для аргумента backlog
              функции listen(2); см. страницу руководства listen(2) для подробностей.

       /proc/sys/proc
              Эта директория может быть пустой.

       /proc/sys/sunrpc
              Эта директория поддерживает удаленный вызов процедур Sun для
              сетевой файловой системы (NFS). В некоторых системах она может
              отсутствовать.

       /proc/sys/user (начиная с Linux 4.9)
              См. namespaces(7).

       /proc/sys/vm
              Эта директория содержит файлы для настройки управления памятью,
              буферов и кэша.

       /proc/sys/vm/admin_reserve_kbytes (начиная с Linux 3.10)
              Этот файл определяет количество свободной памяти (в КиБ) в
              системе, которое должно быть зарезервировано для пользователей с
              возможностью CAP_SYS_ADMIN.

              Значение по умолчанию в этом файле - минимум [3% свободных страниц, 8МиБ],
              выраженное в КиБ. По умолчанию предполагается предоставить достаточно
              ресурсов суперпользователю для входа в систему и завершения процесса,
              если необходимо, в режиме перераспределения по умолчанию 'guess'
              (т.е. 0 в /proc/sys/vm/overcommit_memory).

              Системы, работающие в режиме "overcommit never" (т.е. значение 2 в
              /proc/sys/vm/overcommit_memory), должны увеличить значение
              в этом файле, чтобы учесть полный размер виртуальной памяти
              программ, используемых для восстановления (например, login(1), ssh(1)
              и top(1)). В противном случае, суперпользователь может не смочь
              войти в систему для ее восстановления. Например, на x86-64 
              подходящим значением является 131072 (зарезервировано 128MiB).

              Изменение значения в этом файле вступает в силу, когда 
              приложение запрашивает память.

       /proc/sys/vm/compact_memory (начиная с Linux 2.6.35)
              Когда в этот файл записывается 1, все зоны сжимаются так,
              чтобы свободная память была доступна в непрерывных блоках,
              где это возможно. Результат этого действия можно увидеть, 
              изучив /proc/buddyinfo.

              Присутствует только если ядро было сконфигурировано с
              CONFIG_COMPACTION.

       /proc/sys/vm/drop_caches (начиная с Linux 2.6.16)
              Запись в этот файл заставляет ядро сбросить чистые
              кэши, записи каталогов и inode из памяти, освобождая эту
              память. Это может быть полезно для тестирования управления памятью
              и выполнения воспроизводимых тестов производительности файловой системы.
              Поскольку запись в этот файл приводит к потере преимуществ кэширования,
              это может снизить общую производительность системы.

              Чтобы освободить pagecache, используйте:

                  echo 1 > /proc/sys/vm/drop_caches

              Для освобождения dentries и inodes используйте:

                  echo 2 > /proc/sys/vm/drop_caches

              Для освобождения pagecache, dentries и inodes используйте:

                  echo 3 > /proc/sys/vm/drop_caches

              Поскольку запись в этот файл является неразрушающей операцией,
              а "грязные" объекты не могут быть освобождены, пользователю следует 
              сначала выполнить sync(1).

       /proc/sys/vm/sysctl_hugetlb_shm_group (начиная с Linux 2.6.7)
              Этот файл с возможностью записи содержит ID группы, которой разрешено
              выделять память с использованием огромных страниц (huge pages). Если процесс имеет
              группу файловой системы или любую дополнительную группу, совпадающую
              с этим ID группы, то он может выделять огромные страницы без обладания
              возможностью CAP_IPC_LOCK; см. memfd_create(2), mmap(2) и shmget(2).

       /proc/sys/vm/legacy_va_layout (начиная с Linux 2.6.9)
              Если не ноль, это отключает новую 32-битную схему отображения
              памяти; ядро будет использовать устаревшую (2.4) схему для
              всех процессов.

       /proc/sys/vm/memory_failure_early_kill (начиная с Linux 2.6.32)
              Управляет тем, как убивать процессы при обнаружении 
              неисправимой ошибки памяти (обычно 2-битовой ошибки в 
              модуле памяти), которая не может быть обработана ядром 
              и обнаруживается аппаратно в фоновом режиме. В некоторых 
              случаях (например, когда страница все еще имеет действительную 
              копию на диске) ядро обработает сбой прозрачно, не затрагивая 
              приложения. Но если нет другой актуальной копии данных, 
              оно будет убивать процессы, чтобы предотвратить распространение 
              повреждения данных.

              Файл имеет одно из следующих значений:

              1:  Убивать все процессы, которые отображают поврежденную 
                  и не подлежащую перезагрузке страницу, как только 
                  обнаружится повреждение. Обратите внимание, что это 
                  не поддерживается для некоторых типов страниц, таких 
                  как данные, выделенные внутри ядра, или кэш подкачки, 
                  но работает для большинства пользовательских страниц.

              0:  Отменить отображение поврежденной страницы во всех 
                  процессах и убивать процесс только если он попытается 
                  обратиться к странице.

              Убийство выполняется с помощью сигнала SIGBUS с установленным 
              si_code в BUS_MCEERR_AO. Процессы могут обрабатывать это 
              если хотят; см. sigaction(2) для более подробной информации.

              Эта функция активна только на архитектурах/платформах
              с расширенной обработкой сбоев машины и зависит от
              аппаратных возможностей.

              Приложения могут индивидуально переопределить настройку
              memory_failure_early_kill с помощью операции prctl(2) PR_MCE_KILL.

              Присутствует только если ядро было сконфигурировано с
              CONFIG_MEMORY_FAILURE.

       /proc/sys/vm/memory_failure_recovery (начиная с Linux 2.6.32)
              Включить восстановление после сбоев памяти (когда поддерживается
              платформой).

              1:  Попытка восстановления.

              0:  Всегда паниковать при сбое памяти.

              Присутствует только если ядро было сконфигурировано с
              CONFIG_MEMORY_FAILURE.

       /proc/sys/vm/oom_dump_tasks (начиная с Linux 2.6.25)
              Включает системный дамп задач (исключая потоки ядра),
              который создается, когда ядро выполняет OOM-уничтожение.
              Дамп включает следующую информацию для каждой задачи
              (потока, процесса): ID потока, реальный ID пользователя, ID группы потоков
              (ID процесса), размер виртуальной памяти, размер резидентного набора,
              CPU, на котором задача запланирована, оценка oom_adj (см.
              описание /proc/[pid]/oom_adj) и имя команды.
              Это помогает определить, почему был вызван OOM-киллер и
              идентифицировать неконтролируемую задачу, которая вызвала его.

              Если это значение содержит ноль, эта информация
              подавляется. На очень больших системах с тысячами
              задач, может быть не целесообразно dump'ить информацию о состоянии памяти для
              каждой задачи. Такие системы не должны быть
              вынуждены нести штраф производительности в ситуациях OOM,
              когда информация может быть не нужна.

              Если устанавливается ненулевое значение, эта информация показывается
              всякий раз, когда OOM-killer фактически убивает задачу,
              потребляющую память.

              Значение по умолчанию - 0.

       /proc/sys/vm/oom_kill_allocating_task (начиная с Linux 2.6.24)
              Это включает или отключает убийство задачи, вызвавшей OOM,
              в ситуациях нехватки памяти.

              Если это значение равно нулю, OOM-killer просканирует
              весь список задач и выберет задачу на основе эвристик
              для убийства. Обычно это выбирает вышедшую из-под контроля задачу,
              потребляющую память, которая освобождает большое количество памяти при убийстве.

              Если установлено ненулевое значение, OOM-killer просто убивает
              задачу, которая вызвала состояние нехватки памяти. Это
              позволяет избежать возможного дорогостоящего сканирования списка задач.

              Если /proc/sys/vm/panic_on_oom не равно нулю, оно имеет
              приоритет над любым значением, используемым в
              /proc/sys/vm/oom_kill_allocating_task.

              Значение по умолчанию - 0.

       /proc/sys/vm/overcommit_kbytes (начиная с Linux 3.14)
              Этот доступный для записи файл предоставляет альтернативу
              /proc/sys/vm/overcommit_ratio для управления
              CommitLimit, когда /proc/sys/vm/overcommit_memory имеет
              значение 2. Он позволяет указать количество избыточного выделения памяти
              в виде абсолютного значения (в кБ), а не в виде
              процентного соотношения, как это делается с помощью overcommit_ratio. Это
              позволяет более точно контролировать CommitLimit на системах
              с чрезвычайно большими объемами памяти.

              Только один из параметров overcommit_kbytes или overcommit_ratio может иметь
              эффект: если overcommit_kbytes имеет ненулевое значение, то
              он используется для расчета CommitLimit, в противном случае
              используется overcommit_ratio. Запись значения в любой из
              этих файлов приводит к установке значения в другом файле равным
              нулю.

       /proc/sys/vm/overcommit_memory
              Этот файл содержит режим учета виртуальной памяти ядра.
              Значения:

                     0: эвристическое избыточное выделение (это значение по умолчанию)
                     1: всегда избыточно выделять, никогда не проверять
                     2: всегда проверять, никогда не выделять избыточно

              В режиме 0 вызовы mmap(2) с MAP_NORESERVE не
              проверяются, и проверка по умолчанию очень слабая, что приводит к
              риску получить процесс, "убитый OOM".

              В режиме 1 ядро делает вид, что памяти всегда достаточно,
              пока память фактически не закончится. Один из примеров
              использования этого режима - научные вычислительные
              приложения, использующие большие разреженные массивы.
              В версиях ядра Linux до 2.6.0 любое ненулевое значение
              подразумевает режим 1.

              В режиме 2 (доступен начиная с Linux 2.6), общее виртуальное
              адресное пространство, которое может быть выделено (CommitLimit
              в /proc/meminfo), рассчитывается как

                  CommitLimit = (total_RAM - total_huge_TLB) *
                                overcommit_ratio / 100 + total_swap

              где:

                   *  total_RAM - это общее количество ОЗУ в
                      системе;

                   *  total_huge_TLB - это объем памяти, отведенный
                      для огромных страниц;

                   *  overcommit_ratio - это значение в
                      /proc/sys/vm/overcommit_ratio; и

                   *  total_swap - это объем пространства подкачки.

              Например, в системе с 16 ГБ физической ОЗУ, 16 ГБ
              пространства подкачки, без выделенного пространства для
              огромных страниц и при overcommit_ratio равном 50,
              эта формула даёт CommitLimit в 24 ГБ.

              Начиная с Linux 3.14, если значение в
              /proc/sys/vm/overcommit_kbytes ненулевое, то
              CommitLimit вместо этого рассчитывается как:

                  CommitLimit = overcommit_kbytes + total_swap

              См. также описание
              /proc/sys/vm/admin_reserve_kbytes и
              /proc/sys/vm/user_reserve_kbytes.

       /proc/sys/vm/overcommit_ratio (начиная с Linux 2.6.0)
              Этот доступный для записи файл определяет процент, на который 
              память может быть перераспределена.  Значение по умолчанию в 
              файле - 50. См. описание
              /proc/sys/vm/overcommit_memory.

       /proc/sys/vm/panic_on_oom (начиная с Linux 2.6.18)
              Включает или отключает панику ядра в ситуации
              нехватки памяти.

              Если этот файл установлен в значение 0, OOM-killer ядра
              убьет какой-нибудь неконтролируемый процесс. Обычно OOM-
              killer способен убить неконтролируемый процесс, и система
              выживет.

              Если этот файл установлен в значение 1, то ядро
              обычно паникует при нехватке памяти. Однако, если
              процесс ограничивает выделения на определенных узлах
              используя политики памяти (mbind(2) MPOL_BIND) или 
              cpusets (cpuset(7)), и эти узлы достигают состояния
              исчерпания памяти, один процесс может быть убит OOM-killer'ом.
              Паника в этом случае не происходит: поскольку память
              других узлов может быть свободна, это означает, что
              система в целом еще может не достигнуть ситуации
              нехватки памяти.

              Если этот файл установлен в значение 2, ядро всегда
              паникует при возникновении состояния нехватки памяти.

              Значение по умолчанию - 0. 1 и 2 используются для отказоустойчивости 
              кластеризации. Выберите одно из них в соответствии с вашей политикой 
              отказоустойчивости.

       /proc/sys/vm/swappiness
              Значение в этом файле контролирует, насколько агрессивно
              ядро будет выгружать страницы памяти. Более высокие значения увеличивают
              агрессивность, более низкие значения снижают агрессивность.
              Значение по умолчанию - 60.

       /proc/sys/vm/user_reserve_kbytes (начиная с Linux 3.10)
              Определяет количество памяти (в КиБ) для резервирования для пользовательских
              процессов. Это предназначено для предотвращения запуска пользователем
              единственного процесса, поглощающего всю память, такого, от которого
              нельзя восстановиться (убить обжору). Значение в этом файле имеет
              эффект только когда /proc/sys/vm/overcommit_memory установлен
              в 2 (режим "никогда не перевыделять"). В этом случае система
              резервирует объем памяти, который является минимумом из [3% от 
              текущего размера процесса, user_reserve_kbytes].

              Значение по умолчанию в этом файле - минимум из [3% свободных
              страниц, 128МиБ], выраженное в КиБ.

              Если значение в этом файле установлено в ноль, то пользователю
              будет разрешено выделить всю свободную память одним
              процессом (за вычетом объема, зарезервированного
              /proc/sys/vm/admin_reserve_kbytes). Любые последующие
              попытки выполнить команду приведут к "fork: Невозможно
              выделить память".

              Изменение значения в этом файле вступает в силу всякий раз, когда
              приложение запрашивает память.

       /proc/sys/vm/unprivileged_userfaultfd (начиная с Linux 5.2)
              Этот (доступный для записи) файл предоставляет флаг, который управляет тем,
              разрешено ли непривилегированным процессам использовать
              userfaultfd(2). Если в этом файле значение 1, тогда
              непривилегированные процессы могут использовать userfaultfd(2). Если в
              этом файле значение 0, тогда только процессы, имеющие возможность
              CAP_SYS_PTRACE, могут использовать userfaultfd(2). По умолчанию
              значение в этом файле равно 1.

       /proc/sysrq-trigger (начиная с Linux 2.4.21)
              Запись символа в этот файл активирует ту же функцию SysRq,
              что и нажатие ALT-SysRq-<символ> (см.
              описание /proc/sys/kernel/sysrq). Этот файл обычно
              доступен для записи только root-пользователю. Для дополнительной информации см.
              файл исходного кода ядра Linux
              Documentation/admin-guide/sysrq.rst (или
              Documentation/sysrq.txt до Linux 4.10).

       /proc/sysvipc
              Поддиректория, содержащая псевдофайлы msg, sem и shm.
              Эти файлы перечисляют объекты System V Interprocess Communication
              (IPC) (соответственно: очереди сообщений, семафоры,
              и разделяемую память), которые в настоящее время существуют в системе,
              предоставляя информацию, аналогичную доступной через
              ipcs(1). Эти файлы имеют заголовки и отформатированы (один
              объект IPC на строку) для удобного понимания. sysvipc(7)
              предоставляет дополнительную информацию о данных, показываемых
              этими файлами.

       /proc/thread-self (начиная с Linux 3.17)
              Этот каталог ссылается на поток, обращающийся к файловой системе /proc,
              и идентичен каталогу /proc/self/task/[tid],
              именуемому по идентификатору потока процесса ([tid])
              того же потока.

       /proc/timer_list (начиная с Linux 2.6.21)
              Этот файл только для чтения предоставляет список всех
              ожидающих (высокоточных) таймеров, всех источников 
              событий часов и их параметров в удобочитаемой форме.

       /proc/timer_stats (от Linux 2.6.21 до Linux 4.10)
              Это отладочное средство для визуализации (зло)употребления таймерами
              в системе Linux для разработчиков ядра и пользовательского пространства.
              Оно может использоваться разработчиками ядра и пользовательского пространства
              для проверки того, что их код не злоупотребляет таймерами.
              Цель — избежать ненужных пробуждений, тем самым
              оптимизируя энергопотребление.

              Если включено в ядре (CONFIG_TIMER_STATS), но не
              используется, то имеет почти нулевые накладные расходы во время выполнения и
              относительно небольшие накладные расходы на структуры данных. Даже если
              сбор данных включен во время работы, накладные расходы низкие: все
              блокировки выполняются на уровне каждого процессора (per-CPU), а поиск осуществляется по хеш-таблице.

              Файл /proc/timer_stats используется как для управления
              средством выборки, так и для чтения полученной информации.

              Функциональность timer_stats неактивна при загрузке. Период
              выборки можно начать с помощью следующей
              команды:

                  # echo 1 > /proc/timer_stats

              Следующая команда останавливает период выборки:

                  # echo 0 > /proc/timer_stats

              Статистику можно получить с помощью:

                  $ cat /proc/timer_stats

              Пока выборка включена, при каждом чтении из
              /proc/timer_stats будет отображаться обновленная статистика. После
              отключения выборки, собранная информация сохраняется
              до начала нового периода выборки. Это позволяет
              выполнять многократные чтения.

              Пример вывода из /proc/timer_stats:

                  $ cat /proc/timer_stats
                  Timer Stats Version: v0.3
                  Sample period: 1.764 s
                  Collection: active
                    255,     0 swapper/3        hrtimer_start_range_ns (tick_sched_timer)
                     71,     0 swapper/1        hrtimer_start_range_ns (tick_sched_timer)
                     58,     0 swapper/0        hrtimer_start_range_ns (tick_sched_timer)
                      4,  1694 gnome-shell      mod_delayed_work_on (delayed_work_timer_fn)
                     17,     7 rcu_sched        rcu_gp_kthread (process_timeout)
                  ...
                      1,  4911 kworker/u16:0    mod_delayed_work_on (delayed_work_timer_fn)
                     1D,  2522 kworker/0:0      queue_delayed_work_on (delayed_work_timer_fn)
                  1029 total events, 583.333 events/sec

              Столбцы вывода:

              *  количество событий, опционально (с версии Linux 2.6.23) 
                 за которым следует буква 'D', если это отложенный таймер;

              *  PID процесса, инициализировавшего таймер;

              *  имя процесса, инициализировавшего таймер;

              *  функция, где был инициализирован таймер; и

              *  (в скобках) функция обратного вызова, которая
                 ассоциирована с таймером.

              Во время цикла разработки Linux 4.11 этот файл был
              удален из-за проблем с безопасностью, так как он раскрывает
              информацию между пространствами имен. Кроме того,
              можно получить ту же информацию через средства трассировки внутри ядра,
              такие как ftrace.

       /proc/tty
              Подкаталог, содержащий псевдо-файлы и
              подкаталоги для драйверов tty и дисциплин линий.

       /proc/uptime
              Этот файл содержит два числа (значения в секундах): время
              работы системы (включая время, проведенное в режиме приостановки) и
              количество времени, проведенного в процессе ожидания.

       /proc/version
              Эта строка идентифицирует версию ядра, которая
              в настоящее время запущена. Она включает содержимое
              /proc/sys/kernel/ostype, /proc/sys/kernel/osrelease и
              /proc/sys/kernel/version. Например:

                  Linux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994

       /proc/vmstat (начиная с Linux 2.6.0)
              Этот файл отображает различные статистические данные виртуальной памяти.
              Каждая строка этого файла содержит одну пару имя-значение,
              разделенную пробелами. Некоторые строки присутствуют только если
              ядро было сконфигурировано с соответствующими опциями. (В некоторых
              случаях, опции, необходимые для определенных файлов, изменялись в 
              разных версиях ядра, поэтому они не перечислены здесь. Подробности 
              можно найти, ознакомившись с исходным кодом ядра.) Могут 
              присутствовать следующие поля:

              nr_free_pages (начиная с Linux 2.6.31)

              nr_alloc_batch (начиная с Linux 3.12)

              nr_inactive_anon (начиная с Linux 2.6.28)

              nr_active_anon (начиная с Linux 2.6.28)

              nr_inactive_file (начиная с Linux 2.6.28)

              nr_active_file (начиная с Linux 2.6.28)

              nr_unevictable (начиная с Linux 2.6.28)

              nr_mlock (начиная с Linux 2.6.28)

              nr_anon_pages (начиная с Linux 2.6.18)

              nr_mapped (начиная с Linux 2.6.0)

              nr_file_pages (начиная с Linux 2.6.18)

              nr_dirty (начиная с Linux 2.6.0)

              nr_writeback (начиная с Linux 2.6.0)

              nr_slab_reclaimable (начиная с Linux 2.6.19)

              nr_slab_unreclaimable (начиная с Linux 2.6.19)

              nr_page_table_pages (начиная с Linux 2.6.0)

              nr_kernel_stack (начиная с Linux 2.6.32)
                     Объем памяти, выделенной для стеков ядра.

              nr_unstable (начиная с Linux 2.6.0)

              nr_bounce (с версии Linux 2.6.12)

              nr_vmscan_write (с версии Linux 2.6.19)

              nr_vmscan_immediate_reclaim (с версии Linux 3.2)

              nr_writeback_temp (с версии Linux 2.6.26)

              nr_isolated_anon (с версии Linux 2.6.32)

              nr_isolated_file (с версии Linux 2.6.32)

              nr_shmem (с версии Linux 2.6.32)
                     Страницы, используемые shmem и tmpfs(5).

              nr_dirtied (с версии Linux 2.6.37)

              nr_written (с версии Linux 2.6.37)

              nr_pages_scanned (с версии Linux 3.17)

              numa_hit (с версии Linux 2.6.18)

              numa_miss (с версии Linux 2.6.18)

              numa_foreign (с версии Linux 2.6.18)

              numa_interleave (с версии Linux 2.6.18)

              numa_local (с версии Linux 2.6.18)

              numa_other (с версии Linux 2.6.18)

              workingset_refault (с версии Linux 3.15)

              workingset_activate (с версии Linux 3.15)

              workingset_nodereclaim (с версии Linux 3.15)

              nr_anon_transparent_hugepages (с версии Linux 2.6.38)

              nr_free_cma (с версии Linux 3.7)
                     Количество свободных страниц CMA (Распределитель 
                     неразрывной памяти).

              nr_dirty_threshold (с версии Linux 2.6.37)

              nr_dirty_background_threshold (с версии Linux 2.6.37)

              pgpgin (с версии Linux 2.6.0)

              pgpgout (с версии Linux 2.6.0)

              pswpin (с версии Linux 2.6.0)

              pswpout (с версии Linux 2.6.0)

              pgalloc_dma (с версии Linux 2.6.5)

              pgalloc_dma32 (начиная с Linux 2.6.16)

              pgalloc_normal (начиная с Linux 2.6.5)

              pgalloc_high (начиная с Linux 2.6.5)

              pgalloc_movable (начиная с Linux 2.6.23)

              pgfree (начиная с Linux 2.6.0)

              pgactivate (начиная с Linux 2.6.0)

              pgdeactivate (начиная с Linux 2.6.0)

              pgfault (начиная с Linux 2.6.0)

              pgmajfault (начиная с Linux 2.6.0)

              pgrefill_dma (начиная с Linux 2.6.5)

              pgrefill_dma32 (начиная с Linux 2.6.16)

              pgrefill_normal (начиная с Linux 2.6.5)

              pgrefill_high (начиная с Linux 2.6.5)

              pgrefill_movable (начиная с Linux 2.6.23)

              pgsteal_kswapd_dma (начиная с Linux 3.4)

              pgsteal_kswapd_dma32 (начиная с Linux 3.4)

              pgsteal_kswapd_normal (начиная с Linux 3.4)

              pgsteal_kswapd_high (начиная с Linux 3.4)

              pgsteal_kswapd_movable (начиная с Linux 3.4)

              pgsteal_direct_dma

              pgsteal_direct_dma32 (начиная с Linux 3.4)

              pgsteal_direct_normal (начиная с Linux 3.4)

              pgsteal_direct_high (начиная с Linux 3.4)

              pgsteal_direct_movable (начиная с Linux 2.6.23)

              pgscan_kswapd_dma

              pgscan_kswapd_dma32 (начиная с Linux 2.6.16)

              pgscan_kswapd_normal (начиная с Linux 2.6.5)

              pgscan_kswapd_high

              pgscan_kswapd_movable (начиная с Linux 2.6.23)

              pgscan_direct_dma

              pgscan_direct_dma32 (начиная с Linux 2.6.16)

              pgscan_direct_normal

              pgscan_direct_high

              pgscan_direct_movable (начиная с Linux 2.6.23)

              pgscan_direct_throttle (начиная с Linux 3.6)

              zone_reclaim_failed (начиная с Linux 2.6.31)

              pginodesteal (начиная с Linux 2.6.0)

              slabs_scanned (начиная с Linux 2.6.5)

              kswapd_inodesteal (начиная с Linux 2.6.0)

              kswapd_low_wmark_hit_quickly (начиная с 2.6.33)

              kswapd_high_wmark_hit_quickly (начиная с 2.6.33)

              pageoutrun (начиная с Linux 2.6.0)

              allocstall (начиная с Linux 2.6.0)

              pgrotated (начиная с Linux 2.6.0)

              drop_pagecache (начиная с Linux 3.15)

              drop_slab (начиная с Linux 3.15)

              numa_pte_updates (начиная с Linux 3.8)

              numa_huge_pte_updates (начиная с Linux 3.13)

              numa_hint_faults (начиная с Linux 3.8)

              numa_hint_faults_local (начиная с Linux 3.8)

              numa_pages_migrated (начиная с Linux 3.8)

              pgmigrate_success (начиная с Linux 3.8)

              pgmigrate_fail (начиная с Linux 3.8)

              compact_migrate_scanned (начиная с Linux 3.8)

              compact_free_scanned (начиная с Linux 3.8)

              compact_isolated (начиная с Linux 3.8)

              compact_stall (начиная с Linux 2.6.35)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              compact_fail (начиная с Linux 2.6.35)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              compact_success (начиная с Linux 2.6.35)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              htlb_buddy_alloc_success (начиная с Linux 2.6.26)

              htlb_buddy_alloc_fail (начиная с Linux 2.6.26)

              unevictable_pgs_culled (начиная с Linux 2.6.28)

              unevictable_pgs_scanned (начиная с Linux 2.6.28)

              unevictable_pgs_rescued (начиная с Linux 2.6.28)

              unevictable_pgs_mlocked (начиная с Linux 2.6.28)

              unevictable_pgs_munlocked (начиная с Linux 2.6.28)

              unevictable_pgs_cleared (начиная с Linux 2.6.28)

              unevictable_pgs_stranded (начиная с Linux 2.6.28)

              thp_fault_alloc (начиная с Linux 2.6.39)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_fault_fallback (начиная с Linux 2.6.39)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_collapse_alloc (начиная с Linux 2.6.39)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_collapse_alloc_failed (начиная с Linux 2.6.39)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_split (начиная с Linux 2.6.39)
                     См. файл исходного кода ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_zero_page_alloc (начиная с Linux 3.8)
                     Смотрите исходный файл ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              thp_zero_page_alloc_failed (начиная с Linux 3.8)
                     Смотрите исходный файл ядра
                     Documentation/admin-guide/mm/transhuge.rst.

              balloon_inflate (начиная с Linux 3.18)

              balloon_deflate (начиная с Linux 3.18)

              balloon_migrate (начиная с Linux 3.18)

              nr_tlb_remote_flush (начиная с Linux 3.12)

              nr_tlb_remote_flush_received (начиная с Linux 3.12)

              nr_tlb_local_flush_all (начиная с Linux 3.12)

              nr_tlb_local_flush_one (начиная с Linux 3.12)

              vmacache_find_calls (начиная с Linux 3.16)

              vmacache_find_hits (начиная с Linux 3.16)

              vmacache_full_flushes (начиная с Linux 3.19)

       /proc/zoneinfo (начиная с Linux 2.6.13)
              Этот файл отображает информацию о зонах памяти. Это
              полезно для анализа поведения виртуальной памяти.
ПРИМЕЧАНИЯ         верх
       Многие файлы содержат строки (например, переменные окружения и командную
       строку), которые находятся во внутреннем формате, с подполями, разделенными
       нулевыми байтами ('\0'). При осмотре таких файлов вы можете
       обнаружить, что результаты более читабельны, если вы используете команду
       следующего вида для их отображения:

           $ cat file | tr '\000' '\n'

       Эта страница руководства является неполной, возможно, неточной, и
       относится к тому типу информации, которая требует частого обновления.
СМОТРИТЕ ТАКЖЕ         top
       cat(1), dmesg(1), find(1), free(1), htop(1), init(1), ps(1),
       pstree(1), tr(1), uptime(1), chroot(2), mmap(2), readlink(2),
       syslog(2), slabinfo(5), sysfs(5), hier(7), namespaces(7),
       time(7), arp(8), hdparm(8), ifconfig(8), lsmod(8), lspci(8),
       mount(8), netstat(8), procinfo(8), route(8), sysctl(8)

       Исходные файлы ядра Linux:
       Documentation/filesystems/proc.txt, Documentation/sysctl/fs.txt,
       Documentation/sysctl/kernel.txt, Documentation/sysctl/net.txt,
       и Documentation/sysctl/vm.txt.
КОЛОФОН         top
       Эта страница является частью выпуска 5.13 проекта Linux man-pages.
       Описание проекта, информация о сообщении об ошибках
       и последняя версия этой страницы могут быть найдены по адресу
       https://www.kernel.org/doc/man-pages/.

Linux                          2021-08-27                        PROC(5)
